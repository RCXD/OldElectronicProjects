
Project01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000096c  00000a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000096c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000041e  0080010a  0080010a  00000a0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e71  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000973  00000000  00000000  0000194d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b7  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00002878  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004db  00000000  00000000  0000298c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b3  00000000  00000000  00002e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000331a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	47 c0       	rjmp	.+142    	; 0xc8 <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e6       	ldi	r30, 0x6C	; 108
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	25 e0       	ldi	r18, 0x05	; 5
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 32       	cpi	r26, 0x28	; 40
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	fe d1       	rcall	.+1020   	; 0x4c0 <main>
  c4:	51 c4       	rjmp	.+2210   	; 0x968 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_14>:

int i, j, k;
char GLCD_data[128][8];

ISR(TIMER1_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
	if(num_count > 0xfe) num_count = 0;
  d4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <num_count>
  d8:	8f 3f       	cpi	r24, 0xFF	; 255
  da:	11 f4       	brne	.+4      	; 0xe0 <__vector_14+0x18>
  dc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <num_count>
}
  e0:	8f 91       	pop	r24
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <port_init>:

void port_init(void)
{
	DDRF = 0xff;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRC = 0xff;
  f2:	84 bb       	out	0x14, r24	; 20
  f4:	08 95       	ret

000000f6 <GLCD_handler>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	92 e0       	ldi	r25, 0x02	; 2
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <GLCD_handler+0x2>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <GLCD_handler+0x8>

void GLCD_handler(char rs, char cs, char data)
{
	//__delay_cycles(1); // 연속된 신호 입력에 따른 오류 방지용 delay
	_delay_us(1);
	PORTF = 0x00;   // Control Port가 새로운 입력을 받을 수 있는 상태로 만든다. //대체 왜?
  fe:	e2 e6       	ldi	r30, 0x62	; 98
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	10 82       	st	Z, r1
	PORTF  = PORTF & ~0x04; // E Fall
 104:	90 81       	ld	r25, Z
 106:	9b 7f       	andi	r25, 0xFB	; 251
 108:	90 83       	st	Z, r25
	PORTF = PORTF & ~0x02; // R/W Fall
 10a:	90 81       	ld	r25, Z
 10c:	9d 7f       	andi	r25, 0xFD	; 253
 10e:	90 83       	st	Z, r25

	switch(rs) // RS choice
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	19 f4       	brne	.+6      	; 0x11a <GLCD_handler+0x24>
	{
		case  0x01: 
		PORTF = PORTF | 0x01; break; // data mode
 114:	80 81       	ld	r24, Z
 116:	81 60       	ori	r24, 0x01	; 1
 118:	80 83       	st	Z, r24
		case ~0x01: 
		PORTF = PORTF & ~0x01; break; // ins mode
	}

	PORTF = PORTA | cs; // CS choice
 11a:	8b b3       	in	r24, 0x1b	; 27
 11c:	68 2b       	or	r22, r24
 11e:	e2 e6       	ldi	r30, 0x62	; 98
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	60 83       	st	Z, r22
	PORTF = PORTA | 0x20; // E Rise
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	80 62       	ori	r24, 0x20	; 32
 128:	80 83       	st	Z, r24
	PORTC = data;   // Data Input
 12a:	45 bb       	out	0x15, r20	; 21
	PORTF = PORTF & ~0x20; //  E Fall
 12c:	80 81       	ld	r24, Z
 12e:	8f 7d       	andi	r24, 0xDF	; 223
 130:	80 83       	st	Z, r24
 132:	08 95       	ret

00000134 <GLCD_init>:
}

void GLCD_init(void)
{
	GLCD_handler(~0x01, 0x18, 0x3f); // display on
 134:	4f e3       	ldi	r20, 0x3F	; 63
 136:	68 e1       	ldi	r22, 0x18	; 24
 138:	8e ef       	ldi	r24, 0xFE	; 254
 13a:	dd df       	rcall	.-70     	; 0xf6 <GLCD_handler>
	GLCD_handler(~0x01, 0x18, 0xc0); // start line set
 13c:	40 ec       	ldi	r20, 0xC0	; 192
 13e:	68 e1       	ldi	r22, 0x18	; 24
 140:	8e ef       	ldi	r24, 0xFE	; 254
 142:	d9 cf       	rjmp	.-78     	; 0xf6 <GLCD_handler>
 144:	08 95       	ret

00000146 <GLCD_Clear>:
}

void GLCD_Clear(void)
{
 146:	af 92       	push	r10
 148:	bf 92       	push	r11
 14a:	df 92       	push	r13
 14c:	ef 92       	push	r14
 14e:	ff 92       	push	r15
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	0f 2e       	mov	r0, r31
 15a:	f4 e2       	ldi	r31, 0x24	; 36
 15c:	af 2e       	mov	r10, r31
 15e:	f1 e0       	ldi	r31, 0x01	; 1
 160:	bf 2e       	mov	r11, r31
 162:	f0 2d       	mov	r31, r0
 164:	d1 2c       	mov	r13, r1
 166:	1d c0       	rjmp	.+58     	; 0x1a2 <GLCD_Clear+0x5c>
	int i,j;
	for (j = 0 ; j < 64 ; j ++ ) // address를 0부터 63까지 반복
	{
		for (i = 0 ; i < 8 ; i ++ ) // page를 0부터 7까지 반복
		{
			GLCD_data[j][i]=0x00; // 0부터 63까지 모든 좌표의 데이터정보를 0x00으로 초기화
 168:	f8 01       	movw	r30, r16
 16a:	11 92       	st	Z+, r1
 16c:	8f 01       	movw	r16, r30
			GLCD_data[64+j][i]=0x00;   //64부터 127까지 모든 좌표의 데이터정보를 0x00으로 초기화
 16e:	f7 01       	movw	r30, r14
 170:	11 92       	st	Z+, r1
 172:	7f 01       	movw	r14, r30
			GLCD_handler(~0x01, 0x18, 0xb8|i); // page set
 174:	4c 2f       	mov	r20, r28
 176:	48 6b       	ori	r20, 0xB8	; 184
 178:	68 e1       	ldi	r22, 0x18	; 24
 17a:	8e ef       	ldi	r24, 0xFE	; 254
 17c:	bc df       	rcall	.-136    	; 0xf6 <GLCD_handler>
			GLCD_handler(~0x01,0x18, 0x40|j); // address set
 17e:	4d 2f       	mov	r20, r29
 180:	68 e1       	ldi	r22, 0x18	; 24
 182:	8e ef       	ldi	r24, 0xFE	; 254
 184:	b8 df       	rcall	.-144    	; 0xf6 <GLCD_handler>
			GLCD_handler(0x01, 0x18, 0x00); // data write
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	68 e1       	ldi	r22, 0x18	; 24
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	b4 df       	rcall	.-152    	; 0xf6 <GLCD_handler>
 18e:	cf 5f       	subi	r28, 0xFF	; 255
void GLCD_Clear(void)
{
	int i,j;
	for (j = 0 ; j < 64 ; j ++ ) // address를 0부터 63까지 반복
	{
		for (i = 0 ; i < 8 ; i ++ ) // page를 0부터 7까지 반복
 190:	c8 30       	cpi	r28, 0x08	; 8
 192:	51 f7       	brne	.-44     	; 0x168 <GLCD_Clear+0x22>
 194:	f8 e0       	ldi	r31, 0x08	; 8
 196:	af 0e       	add	r10, r31
 198:	b1 1c       	adc	r11, r1
 19a:	d3 94       	inc	r13
}

void GLCD_Clear(void)
{
	int i,j;
	for (j = 0 ; j < 64 ; j ++ ) // address를 0부터 63까지 반복
 19c:	80 e4       	ldi	r24, 0x40	; 64
 19e:	d8 16       	cp	r13, r24
 1a0:	41 f0       	breq	.+16     	; 0x1b2 <GLCD_Clear+0x6c>
 1a2:	75 01       	movw	r14, r10
 1a4:	ee ef       	ldi	r30, 0xFE	; 254
 1a6:	fe 1a       	sub	r15, r30
	GLCD_handler(~0x01, 0x18, 0x3f); // display on
	GLCD_handler(~0x01, 0x18, 0xc0); // start line set
}

void GLCD_Clear(void)
{
 1a8:	85 01       	movw	r16, r10
 1aa:	c0 e0       	ldi	r28, 0x00	; 0
		for (i = 0 ; i < 8 ; i ++ ) // page를 0부터 7까지 반복
		{
			GLCD_data[j][i]=0x00; // 0부터 63까지 모든 좌표의 데이터정보를 0x00으로 초기화
			GLCD_data[64+j][i]=0x00;   //64부터 127까지 모든 좌표의 데이터정보를 0x00으로 초기화
			GLCD_handler(~0x01, 0x18, 0xb8|i); // page set
			GLCD_handler(~0x01,0x18, 0x40|j); // address set
 1ac:	dd 2d       	mov	r29, r13
 1ae:	d0 64       	ori	r29, 0x40	; 64
 1b0:	db cf       	rjmp	.-74     	; 0x168 <GLCD_Clear+0x22>
			GLCD_handler(0x01, 0x18, 0x00); // data write
		}
	}
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	ff 90       	pop	r15
 1bc:	ef 90       	pop	r14
 1be:	df 90       	pop	r13
 1c0:	bf 90       	pop	r11
 1c2:	af 90       	pop	r10
 1c4:	08 95       	ret

000001c6 <GLCD_pixel>:

void GLCD_pixel(int col, int row, char color)
{
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
	int page, xadd, cs, yadd;
	if(col >= 0 && col < 128 && row >= 0 && row <64) //표현 가능한 좌표만 실행
 1d2:	80 38       	cpi	r24, 0x80	; 128
 1d4:	91 05       	cpc	r25, r1
 1d6:	08 f0       	brcs	.+2      	; 0x1da <GLCD_pixel+0x14>
 1d8:	7a c0       	rjmp	.+244    	; 0x2ce <GLCD_pixel+0x108>
 1da:	60 34       	cpi	r22, 0x40	; 64
 1dc:	71 05       	cpc	r23, r1
 1de:	08 f0       	brcs	.+2      	; 0x1e2 <GLCD_pixel+0x1c>
 1e0:	76 c0       	rjmp	.+236    	; 0x2ce <GLCD_pixel+0x108>
	{
		cs = col < 64 ? 0x08 : 0x10; // 가로좌표 64를 기준으로 출력 화면 선택
 1e2:	80 34       	cpi	r24, 0x40	; 64
 1e4:	91 05       	cpc	r25, r1
 1e6:	24 f0       	brlt	.+8      	; 0x1f0 <GLCD_pixel+0x2a>
 1e8:	68 94       	set
 1ea:	ff 24       	eor	r15, r15
 1ec:	f4 f8       	bld	r15, 4
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <GLCD_pixel+0x30>
 1f0:	68 94       	set
 1f2:	ff 24       	eor	r15, r15
 1f4:	f3 f8       	bld	r15, 3
		page = row/8; // Page는 row좌표를 8로 나눈 값
 1f6:	8b 01       	movw	r16, r22
 1f8:	77 23       	and	r23, r23
 1fa:	14 f4       	brge	.+4      	; 0x200 <GLCD_pixel+0x3a>
 1fc:	09 5f       	subi	r16, 0xF9	; 249
 1fe:	1f 4f       	sbci	r17, 0xFF	; 255
 200:	15 95       	asr	r17
 202:	07 95       	ror	r16
 204:	15 95       	asr	r17
 206:	07 95       	ror	r16
 208:	15 95       	asr	r17
 20a:	07 95       	ror	r16
		xadd  = row%8; // xadd는 해당 페이지에서 변경될 도트픽셀의 세로 위치
 20c:	67 70       	andi	r22, 0x07	; 7
 20e:	70 78       	andi	r23, 0x80	; 128
 210:	77 23       	and	r23, r23
 212:	34 f4       	brge	.+12     	; 0x220 <GLCD_pixel+0x5a>
 214:	61 50       	subi	r22, 0x01	; 1
 216:	71 09       	sbc	r23, r1
 218:	68 6f       	ori	r22, 0xF8	; 248
 21a:	7f 6f       	ori	r23, 0xFF	; 255
 21c:	6f 5f       	subi	r22, 0xFF	; 255
 21e:	7f 4f       	sbci	r23, 0xFF	; 255
		yadd  = col%64; // yadd는 해당 화면에서 변경될 도트픽셀의 가로 위치
 220:	9c 01       	movw	r18, r24
 222:	2f 73       	andi	r18, 0x3F	; 63
 224:	30 78       	andi	r19, 0x80	; 128
 226:	33 23       	and	r19, r19
 228:	34 f4       	brge	.+12     	; 0x236 <GLCD_pixel+0x70>
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	31 09       	sbc	r19, r1
 22e:	20 6c       	ori	r18, 0xC0	; 192
 230:	3f 6f       	ori	r19, 0xFF	; 255
 232:	2f 5f       	subi	r18, 0xFF	; 255
 234:	3f 4f       	sbci	r19, 0xFF	; 255
 236:	e2 2e       	mov	r14, r18
		
		//기존 정보에서 하나의 픽셀만을 변경한다. color에 따라 ON OFF 결정
		switch(color)
 238:	44 23       	and	r20, r20
 23a:	c1 f0       	breq	.+48     	; 0x26c <GLCD_pixel+0xa6>
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	61 f5       	brne	.+88     	; 0x298 <GLCD_pixel+0xd2>
		{
			case 1: GLCD_data[col][page] = GLCD_data[col][page] |  0x01<<xadd; break;
 240:	fc 01       	movw	r30, r24
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	ee 0f       	add	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	ee 0f       	add	r30, r30
 24c:	ff 1f       	adc	r31, r31
 24e:	ec 5d       	subi	r30, 0xDC	; 220
 250:	fe 4f       	sbci	r31, 0xFE	; 254
 252:	e0 0f       	add	r30, r16
 254:	f1 1f       	adc	r31, r17
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <GLCD_pixel+0x9a>
 25c:	22 0f       	add	r18, r18
 25e:	33 1f       	adc	r19, r19
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <GLCD_pixel+0x96>
 264:	30 81       	ld	r19, Z
 266:	23 2b       	or	r18, r19
 268:	20 83       	st	Z, r18
 26a:	16 c0       	rjmp	.+44     	; 0x298 <GLCD_pixel+0xd2>
			case 0: GLCD_data[col][page] = GLCD_data[col][page] & ~(0x01<<xadd); break;
 26c:	fc 01       	movw	r30, r24
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	ee 0f       	add	r30, r30
 274:	ff 1f       	adc	r31, r31
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	ec 5d       	subi	r30, 0xDC	; 220
 27c:	fe 4f       	sbci	r31, 0xFE	; 254
 27e:	e0 0f       	add	r30, r16
 280:	f1 1f       	adc	r31, r17
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <GLCD_pixel+0xc6>
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <GLCD_pixel+0xc2>
 290:	20 95       	com	r18
 292:	30 81       	ld	r19, Z
 294:	23 23       	and	r18, r19
 296:	20 83       	st	Z, r18
 298:	ec 01       	movw	r28, r24
		}

		GLCD_handler(~0x01, cs, 0xb8|page); // page set
 29a:	40 2f       	mov	r20, r16
 29c:	48 6b       	ori	r20, 0xB8	; 184
 29e:	6f 2d       	mov	r22, r15
 2a0:	8e ef       	ldi	r24, 0xFE	; 254
 2a2:	29 df       	rcall	.-430    	; 0xf6 <GLCD_handler>
		GLCD_handler(~0x01, cs, 0x40|yadd); // address set
 2a4:	4e 2d       	mov	r20, r14
 2a6:	40 64       	ori	r20, 0x40	; 64
 2a8:	6f 2d       	mov	r22, r15
 2aa:	8e ef       	ldi	r24, 0xFE	; 254
 2ac:	24 df       	rcall	.-440    	; 0xf6 <GLCD_handler>
		GLCD_handler(0x01, cs, GLCD_data[col][page]); // data write
 2ae:	ce 01       	movw	r24, r28
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	8c 5d       	subi	r24, 0xDC	; 220
 2be:	9e 4f       	sbci	r25, 0xFE	; 254
 2c0:	fc 01       	movw	r30, r24
 2c2:	e0 0f       	add	r30, r16
 2c4:	f1 1f       	adc	r31, r17
 2c6:	40 81       	ld	r20, Z
 2c8:	6f 2d       	mov	r22, r15
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	14 df       	rcall	.-472    	; 0xf6 <GLCD_handler>
	}
}
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	ff 90       	pop	r15
 2d8:	ef 90       	pop	r14
 2da:	08 95       	ret

000002dc <display>:

void display(void)
{
 2dc:	0f 93       	push	r16
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
	PORTB= (PORTB & 0xf0) | 0x02;
 2e2:	88 b3       	in	r24, 0x18	; 24
 2e4:	80 7f       	andi	r24, 0xF0	; 240
 2e6:	82 60       	ori	r24, 0x02	; 2
 2e8:	88 bb       	out	0x18, r24	; 24
	PORTE = segment_decoder[(int)bpm%1000/100];
 2ea:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <bpm>
 2ee:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <bpm+0x1>
 2f2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <bpm+0x2>
 2f6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <bpm+0x3>
 2fa:	14 d2       	rcall	.+1064   	; 0x724 <__fixsfsi>
 2fc:	cb 01       	movw	r24, r22
 2fe:	68 ee       	ldi	r22, 0xE8	; 232
 300:	73 e0       	ldi	r23, 0x03	; 3
 302:	1c d1       	rcall	.+568    	; 0x53c <__divmodhi4>
 304:	04 e6       	ldi	r16, 0x64	; 100
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	b8 01       	movw	r22, r16
 30a:	18 d1       	rcall	.+560    	; 0x53c <__divmodhi4>
 30c:	fb 01       	movw	r30, r22
 30e:	e0 50       	subi	r30, 0x00	; 0
 310:	ff 4f       	sbci	r31, 0xFF	; 255
 312:	80 81       	ld	r24, Z
 314:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 316:	8f ec       	ldi	r24, 0xCF	; 207
 318:	97 e0       	ldi	r25, 0x07	; 7
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <display+0x3e>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <display+0x44>
 320:	00 00       	nop
	//__delay_cycles(1000);
	_delay_ms(1);
	PORTE = 0xff;
 322:	cf ef       	ldi	r28, 0xFF	; 255
 324:	c3 b9       	out	0x03, r28	; 3
	
	
	PORTB= (PORTB & 0xf0) | 0x04;
 326:	88 b3       	in	r24, 0x18	; 24
 328:	80 7f       	andi	r24, 0xF0	; 240
 32a:	84 60       	ori	r24, 0x04	; 4
 32c:	88 bb       	out	0x18, r24	; 24
	PORTE = segment_decoder[(int)bpm%100/10];
 32e:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <bpm>
 332:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <bpm+0x1>
 336:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <bpm+0x2>
 33a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <bpm+0x3>
 33e:	f2 d1       	rcall	.+996    	; 0x724 <__fixsfsi>
 340:	cb 01       	movw	r24, r22
 342:	b8 01       	movw	r22, r16
 344:	fb d0       	rcall	.+502    	; 0x53c <__divmodhi4>
 346:	0a e0       	ldi	r16, 0x0A	; 10
 348:	10 e0       	ldi	r17, 0x00	; 0
 34a:	b8 01       	movw	r22, r16
 34c:	f7 d0       	rcall	.+494    	; 0x53c <__divmodhi4>
 34e:	fb 01       	movw	r30, r22
 350:	e0 50       	subi	r30, 0x00	; 0
 352:	ff 4f       	sbci	r31, 0xFF	; 255
 354:	80 81       	ld	r24, Z
 356:	83 b9       	out	0x03, r24	; 3
 358:	8f ec       	ldi	r24, 0xCF	; 207
 35a:	97 e0       	ldi	r25, 0x07	; 7
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <display+0x80>
 360:	00 c0       	rjmp	.+0      	; 0x362 <display+0x86>
 362:	00 00       	nop
	//__delay_cycles(1000);
	_delay_ms(1);
	PORTE = 0xff;
 364:	c3 b9       	out	0x03, r28	; 3
	
	
	PORTB= (PORTB & 0xf0) | 0x08;
 366:	88 b3       	in	r24, 0x18	; 24
 368:	80 7f       	andi	r24, 0xF0	; 240
 36a:	88 60       	ori	r24, 0x08	; 8
 36c:	88 bb       	out	0x18, r24	; 24
	PORTE = segment_decoder[(int)bpm%10];
 36e:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <bpm>
 372:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <bpm+0x1>
 376:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <bpm+0x2>
 37a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <bpm+0x3>
 37e:	d2 d1       	rcall	.+932    	; 0x724 <__fixsfsi>
 380:	cb 01       	movw	r24, r22
 382:	b8 01       	movw	r22, r16
 384:	db d0       	rcall	.+438    	; 0x53c <__divmodhi4>
 386:	fc 01       	movw	r30, r24
 388:	e0 50       	subi	r30, 0x00	; 0
 38a:	ff 4f       	sbci	r31, 0xFF	; 255
 38c:	80 81       	ld	r24, Z
 38e:	83 b9       	out	0x03, r24	; 3
 390:	8f ec       	ldi	r24, 0xCF	; 207
 392:	97 e0       	ldi	r25, 0x07	; 7
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <display+0xb8>
 398:	00 c0       	rjmp	.+0      	; 0x39a <display+0xbe>
 39a:	00 00       	nop
	//__delay_cycles(1000);
	_delay_ms(1);
	PORTE = 0xff;
 39c:	c3 b9       	out	0x03, r28	; 3
 39e:	8f ec       	ldi	r24, 0xCF	; 207
 3a0:	97 e0       	ldi	r25, 0x07	; 7
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <display+0xc6>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <display+0xcc>
 3a8:	00 00       	nop
	//__delay_cycles(1000);
	_delay_ms(1);
}
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	08 95       	ret

000003b2 <led>:


void led(void)
{
	float temp = 0; //임시 변수 : led함수 내에서만 사용하기 위함
	if (state == 0)
 3b2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <state>
 3b6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <state+0x1>
 3ba:	00 97       	sbiw	r24, 0x00	; 0
 3bc:	c1 f4       	brne	.+48     	; 0x3ee <led+0x3c>
	{
		if(flag)
 3be:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 3c2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 3c6:	89 2b       	or	r24, r25
 3c8:	49 f0       	breq	.+18     	; 0x3dc <led+0x2a>
		{
			t2++;
 3ca:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <t2>
 3ce:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <t2+0x1>
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <t2+0x1>
 3d8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <t2>
		}
		if (PINA&0X04)
 3dc:	ca 9b       	sbis	0x19, 2	; 25
 3de:	6f c0       	rjmp	.+222    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
		{
			state = 1;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <state+0x1>
 3e8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <state>
 3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <led+0x44>
		}
	}
	if (state == 1)
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	91 05       	cpc	r25, r1
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <led+0x44>
 3f4:	50 c0       	rjmp	.+160    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
	{
		//e=e+1;
		flag = 1;
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 3fe:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		temp = cnt;
		cnt = t1+t2;
		cnt = (temp + cnt)/2.0; //평균 필터
 402:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <t1>
 406:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <t1+0x1>
 40a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <t2>
 40e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <t2+0x1>
 412:	68 0f       	add	r22, r24
 414:	79 1f       	adc	r23, r25
 416:	07 2e       	mov	r0, r23
 418:	00 0c       	add	r0, r0
 41a:	88 0b       	sbc	r24, r24
 41c:	99 0b       	sbc	r25, r25
 41e:	b5 d1       	rcall	.+874    	; 0x78a <__floatsisf>
 420:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <cnt>
 424:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <cnt+0x1>
 428:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <cnt+0x2>
 42c:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <cnt+0x3>
 430:	ad d0       	rcall	.+346    	; 0x58c <__addsf3>
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	5f e3       	ldi	r21, 0x3F	; 63
 43a:	33 d2       	rcall	.+1126   	; 0x8a2 <__mulsf3>
 43c:	9b 01       	movw	r18, r22
 43e:	ac 01       	movw	r20, r24
 440:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <cnt>
 444:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <cnt+0x1>
 448:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <cnt+0x2>
 44c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <cnt+0x3>
		bpm = 5000/cnt; //역수 취하고 보정값 곱해줌.
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	70 e4       	ldi	r23, 0x40	; 64
 454:	8c e9       	ldi	r24, 0x9C	; 156
 456:	95 e4       	ldi	r25, 0x45	; 69
 458:	fd d0       	rcall	.+506    	; 0x654 <__divsf3>
 45a:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <bpm>
 45e:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <bpm+0x1>
 462:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <bpm+0x2>
 466:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <bpm+0x3>
		t1=0;
 46a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <t1+0x1>
 46e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <t1>
		t2=0;
 472:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <t2+0x1>
 476:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <t2>
		if (!(PINA & 0X04))
 47a:	ca 99       	sbic	0x19, 2	; 25
 47c:	1e c0       	rjmp	.+60     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		{
			state = 0;
 47e:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <state+0x1>
 482:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <state>
 486:	19 c0       	rjmp	.+50     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
		}
		if (PINA&0x04)
		{
			state = 2;
 488:	82 e0       	ldi	r24, 0x02	; 2
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <state+0x1>
 490:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <state>
 494:	02 c0       	rjmp	.+4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
		}
	}
	if (state ==2)
 496:	02 97       	sbiw	r24, 0x02	; 2
 498:	91 f4       	brne	.+36     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
	{
		t1++;
 49a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <t1>
 49e:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <t1+0x1>
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <t1+0x1>
 4a8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <t1>
		if(!(PINA & 0x04))
 4ac:	ca 99       	sbic	0x19, 2	; 25
 4ae:	07 c0       	rjmp	.+14     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
		{
			state = 0;
 4b0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <state+0x1>
 4b4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <state>
		}
	}
}
 4b8:	08 95       	ret
		t2=0;
		if (!(PINA & 0X04))
		{
			state = 0;
		}
		if (PINA&0x04)
 4ba:	ca 99       	sbic	0x19, 2	; 25
 4bc:	e5 cf       	rjmp	.-54     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 4be:	08 95       	ret

000004c0 <main>:
	}
}

int main(void)
{
	port_init();
 4c0:	15 de       	rcall	.-982    	; 0xec <port_init>
	GLCD_init();
 4c2:	38 de       	rcall	.-912    	; 0x134 <GLCD_init>
	GLCD_Clear();//화면 전체를 지운다.
 4c4:	40 de       	rcall	.-896    	; 0x146 <GLCD_Clear>
 4c6:	41 e0       	ldi	r20, 0x01	; 1


	GLCD_pixel(0,1,1); // 좌표(0,1)에 점을 추가한다.
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	7a de       	rcall	.-780    	; 0x1c6 <GLCD_pixel>
 4d2:	8b ef       	ldi	r24, 0xFB	; 251


	DDRA= 0XFF-0x04;
 4d4:	8a bb       	out	0x1a, r24	; 26
 4d6:	9f ef       	ldi	r25, 0xFF	; 255
	PORTC=0xFF; //CLCD 동작 PORT 설정
 4d8:	95 bb       	out	0x15, r25	; 21
 4da:	e1 e6       	ldi	r30, 0x61	; 97
	DDRF &= 0xFE;
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	80 81       	ld	r24, Z
 4e0:	8e 7f       	andi	r24, 0xFE	; 254
 4e2:	80 83       	st	Z, r24
 4e4:	8f e0       	ldi	r24, 0x0F	; 15
	DDRB=0x0f;PORTB=0x0f;  //segment 4개 다 출력, 4개 다 high상태
 4e6:	87 bb       	out	0x17, r24	; 23
 4e8:	88 bb       	out	0x18, r24	; 24
 4ea:	92 b9       	out	0x02, r25	; 2
	DDRE=0xff;PORTE=0x00;  //PE 다 출력, 처음은 다 LOW
 4ec:	13 b8       	out	0x03, r1	; 3
 4ee:	87 e2       	ldi	r24, 0x27	; 39
	ADMUX= 0x27;
 4f0:	87 b9       	out	0x07, r24	; 7
 4f2:	87 ea       	ldi	r24, 0xA7	; 167
	//ADCSR = 0xA7;
	ADCSRA = 0xA7;
 4f4:	86 b9       	out	0x06, r24	; 6
 4f6:	80 e4       	ldi	r24, 0x40	; 64
	//ADCSR |= 0x40;
	ADCSRA = 0x40;
 4f8:	86 b9       	out	0x06, r24	; 6
 4fa:	c4 e0       	ldi	r28, 0x04	; 4

		if((PIND&0x10)==0x10){
			//__disable_interrupt();
			cli();
			if((TIMSK&0x04)==0){
				TIMSK=0x04;
 4fc:	8f e7       	ldi	r24, 0x7F	; 127
 4fe:	9e e3       	ldi	r25, 0x3E	; 62
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <main+0x40>
 504:	00 c0       	rjmp	.+0      	; 0x506 <main+0x46>
 506:	00 00       	nop
 508:	34 9b       	sbis	0x06, 4	; 6
	while (1)
	{
		//__delay_cycles(8000);
		_delay_ms(8);
		//while((ADCSR & 0x10)==0);
		while((ADCSRA & 0x10)==0);
 50a:	fe cf       	rjmp	.-4      	; 0x508 <main+0x48>
 50c:	34 9a       	sbi	0x06, 4	; 6
		//ADCSR |= 0x10;
		ADCSRA |= 0x10;
 50e:	85 b1       	in	r24, 0x05	; 5
		result=ADCH+40;// 만약 0점조절을 하려면 오차를 여기에 빼줌
 510:	88 5d       	subi	r24, 0xD8	; 216
 512:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <result>
 516:	84 9b       	sbis	0x10, 4	; 16

		if((PIND&0x10)==0x10){
 518:	0e c0       	rjmp	.+28     	; 0x536 <main+0x76>
 51a:	f8 94       	cli
			//__disable_interrupt();
			cli();
 51c:	07 b6       	in	r0, 0x37	; 55
			if((TIMSK&0x04)==0){
 51e:	02 fc       	sbrc	r0, 2
 520:	02 c0       	rjmp	.+4      	; 0x526 <main+0x66>
 522:	c7 bf       	out	0x37, r28	; 55
				TIMSK=0x04;
 524:	01 c0       	rjmp	.+2      	; 0x528 <main+0x68>
 526:	17 be       	out	0x37, r1	; 55
				}else{
				TIMSK=0x00;
 528:	8f ec       	ldi	r24, 0xCF	; 207
 52a:	97 e0       	ldi	r25, 0x07	; 7
 52c:	01 97       	sbiw	r24, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <main+0x6c>
 530:	00 c0       	rjmp	.+0      	; 0x532 <main+0x72>
			}
			//__delay_cycles(1000);
			_delay_ms(1);
			//__enable_interrupt();
			sei();
 532:	00 00       	nop
		}
		display();
 534:	78 94       	sei
 536:	d2 de       	rcall	.-604    	; 0x2dc <display>
		
		led();
 538:	3c df       	rcall	.-392    	; 0x3b2 <led>
 53a:	e0 cf       	rjmp	.-64     	; 0x4fc <main+0x3c>

0000053c <__divmodhi4>:
	}
 53c:	97 fb       	bst	r25, 7
 53e:	07 2e       	mov	r0, r23
 540:	16 f4       	brtc	.+4      	; 0x546 <__divmodhi4+0xa>
 542:	00 94       	com	r0
 544:	06 d0       	rcall	.+12     	; 0x552 <__divmodhi4_neg1>
 546:	77 fd       	sbrc	r23, 7
 548:	08 d0       	rcall	.+16     	; 0x55a <__divmodhi4_neg2>
 54a:	0b d0       	rcall	.+22     	; 0x562 <__udivmodhi4>
 54c:	07 fc       	sbrc	r0, 7
 54e:	05 d0       	rcall	.+10     	; 0x55a <__divmodhi4_neg2>
 550:	3e f4       	brtc	.+14     	; 0x560 <__divmodhi4_exit>

00000552 <__divmodhi4_neg1>:
 552:	90 95       	com	r25
 554:	81 95       	neg	r24
 556:	9f 4f       	sbci	r25, 0xFF	; 255
 558:	08 95       	ret

0000055a <__divmodhi4_neg2>:
 55a:	70 95       	com	r23
 55c:	61 95       	neg	r22
 55e:	7f 4f       	sbci	r23, 0xFF	; 255

00000560 <__divmodhi4_exit>:
 560:	08 95       	ret

00000562 <__udivmodhi4>:
 562:	aa 1b       	sub	r26, r26
 564:	bb 1b       	sub	r27, r27
 566:	51 e1       	ldi	r21, 0x11	; 17
 568:	07 c0       	rjmp	.+14     	; 0x578 <__udivmodhi4_ep>

0000056a <__udivmodhi4_loop>:
 56a:	aa 1f       	adc	r26, r26
 56c:	bb 1f       	adc	r27, r27
 56e:	a6 17       	cp	r26, r22
 570:	b7 07       	cpc	r27, r23
 572:	10 f0       	brcs	.+4      	; 0x578 <__udivmodhi4_ep>
 574:	a6 1b       	sub	r26, r22
 576:	b7 0b       	sbc	r27, r23

00000578 <__udivmodhi4_ep>:
 578:	88 1f       	adc	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	5a 95       	dec	r21
 57e:	a9 f7       	brne	.-22     	; 0x56a <__udivmodhi4_loop>
 580:	80 95       	com	r24
 582:	90 95       	com	r25
 584:	bc 01       	movw	r22, r24
 586:	cd 01       	movw	r24, r26
 588:	08 95       	ret

0000058a <__subsf3>:
 58a:	50 58       	subi	r21, 0x80	; 128

0000058c <__addsf3>:
 58c:	bb 27       	eor	r27, r27
 58e:	aa 27       	eor	r26, r26
 590:	0e d0       	rcall	.+28     	; 0x5ae <__addsf3x>
 592:	4d c1       	rjmp	.+666    	; 0x82e <__fp_round>
 594:	3e d1       	rcall	.+636    	; 0x812 <__fp_pscA>
 596:	30 f0       	brcs	.+12     	; 0x5a4 <__addsf3+0x18>
 598:	43 d1       	rcall	.+646    	; 0x820 <__fp_pscB>
 59a:	20 f0       	brcs	.+8      	; 0x5a4 <__addsf3+0x18>
 59c:	31 f4       	brne	.+12     	; 0x5aa <__addsf3+0x1e>
 59e:	9f 3f       	cpi	r25, 0xFF	; 255
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <__addsf3+0x1a>
 5a2:	1e f4       	brtc	.+6      	; 0x5aa <__addsf3+0x1e>
 5a4:	33 c1       	rjmp	.+614    	; 0x80c <__fp_nan>
 5a6:	0e f4       	brtc	.+2      	; 0x5aa <__addsf3+0x1e>
 5a8:	e0 95       	com	r30
 5aa:	e7 fb       	bst	r30, 7
 5ac:	29 c1       	rjmp	.+594    	; 0x800 <__fp_inf>

000005ae <__addsf3x>:
 5ae:	e9 2f       	mov	r30, r25
 5b0:	4f d1       	rcall	.+670    	; 0x850 <__fp_split3>
 5b2:	80 f3       	brcs	.-32     	; 0x594 <__addsf3+0x8>
 5b4:	ba 17       	cp	r27, r26
 5b6:	62 07       	cpc	r22, r18
 5b8:	73 07       	cpc	r23, r19
 5ba:	84 07       	cpc	r24, r20
 5bc:	95 07       	cpc	r25, r21
 5be:	18 f0       	brcs	.+6      	; 0x5c6 <__addsf3x+0x18>
 5c0:	71 f4       	brne	.+28     	; 0x5de <__addsf3x+0x30>
 5c2:	9e f5       	brtc	.+102    	; 0x62a <__addsf3x+0x7c>
 5c4:	67 c1       	rjmp	.+718    	; 0x894 <__fp_zero>
 5c6:	0e f4       	brtc	.+2      	; 0x5ca <__addsf3x+0x1c>
 5c8:	e0 95       	com	r30
 5ca:	0b 2e       	mov	r0, r27
 5cc:	ba 2f       	mov	r27, r26
 5ce:	a0 2d       	mov	r26, r0
 5d0:	0b 01       	movw	r0, r22
 5d2:	b9 01       	movw	r22, r18
 5d4:	90 01       	movw	r18, r0
 5d6:	0c 01       	movw	r0, r24
 5d8:	ca 01       	movw	r24, r20
 5da:	a0 01       	movw	r20, r0
 5dc:	11 24       	eor	r1, r1
 5de:	ff 27       	eor	r31, r31
 5e0:	59 1b       	sub	r21, r25
 5e2:	99 f0       	breq	.+38     	; 0x60a <__addsf3x+0x5c>
 5e4:	59 3f       	cpi	r21, 0xF9	; 249
 5e6:	50 f4       	brcc	.+20     	; 0x5fc <__addsf3x+0x4e>
 5e8:	50 3e       	cpi	r21, 0xE0	; 224
 5ea:	68 f1       	brcs	.+90     	; 0x646 <__addsf3x+0x98>
 5ec:	1a 16       	cp	r1, r26
 5ee:	f0 40       	sbci	r31, 0x00	; 0
 5f0:	a2 2f       	mov	r26, r18
 5f2:	23 2f       	mov	r18, r19
 5f4:	34 2f       	mov	r19, r20
 5f6:	44 27       	eor	r20, r20
 5f8:	58 5f       	subi	r21, 0xF8	; 248
 5fa:	f3 cf       	rjmp	.-26     	; 0x5e2 <__addsf3x+0x34>
 5fc:	46 95       	lsr	r20
 5fe:	37 95       	ror	r19
 600:	27 95       	ror	r18
 602:	a7 95       	ror	r26
 604:	f0 40       	sbci	r31, 0x00	; 0
 606:	53 95       	inc	r21
 608:	c9 f7       	brne	.-14     	; 0x5fc <__addsf3x+0x4e>
 60a:	7e f4       	brtc	.+30     	; 0x62a <__addsf3x+0x7c>
 60c:	1f 16       	cp	r1, r31
 60e:	ba 0b       	sbc	r27, r26
 610:	62 0b       	sbc	r22, r18
 612:	73 0b       	sbc	r23, r19
 614:	84 0b       	sbc	r24, r20
 616:	ba f0       	brmi	.+46     	; 0x646 <__addsf3x+0x98>
 618:	91 50       	subi	r25, 0x01	; 1
 61a:	a1 f0       	breq	.+40     	; 0x644 <__addsf3x+0x96>
 61c:	ff 0f       	add	r31, r31
 61e:	bb 1f       	adc	r27, r27
 620:	66 1f       	adc	r22, r22
 622:	77 1f       	adc	r23, r23
 624:	88 1f       	adc	r24, r24
 626:	c2 f7       	brpl	.-16     	; 0x618 <__addsf3x+0x6a>
 628:	0e c0       	rjmp	.+28     	; 0x646 <__addsf3x+0x98>
 62a:	ba 0f       	add	r27, r26
 62c:	62 1f       	adc	r22, r18
 62e:	73 1f       	adc	r23, r19
 630:	84 1f       	adc	r24, r20
 632:	48 f4       	brcc	.+18     	; 0x646 <__addsf3x+0x98>
 634:	87 95       	ror	r24
 636:	77 95       	ror	r23
 638:	67 95       	ror	r22
 63a:	b7 95       	ror	r27
 63c:	f7 95       	ror	r31
 63e:	9e 3f       	cpi	r25, 0xFE	; 254
 640:	08 f0       	brcs	.+2      	; 0x644 <__addsf3x+0x96>
 642:	b3 cf       	rjmp	.-154    	; 0x5aa <__addsf3+0x1e>
 644:	93 95       	inc	r25
 646:	88 0f       	add	r24, r24
 648:	08 f0       	brcs	.+2      	; 0x64c <__addsf3x+0x9e>
 64a:	99 27       	eor	r25, r25
 64c:	ee 0f       	add	r30, r30
 64e:	97 95       	ror	r25
 650:	87 95       	ror	r24
 652:	08 95       	ret

00000654 <__divsf3>:
 654:	0c d0       	rcall	.+24     	; 0x66e <__divsf3x>
 656:	eb c0       	rjmp	.+470    	; 0x82e <__fp_round>
 658:	e3 d0       	rcall	.+454    	; 0x820 <__fp_pscB>
 65a:	40 f0       	brcs	.+16     	; 0x66c <__divsf3+0x18>
 65c:	da d0       	rcall	.+436    	; 0x812 <__fp_pscA>
 65e:	30 f0       	brcs	.+12     	; 0x66c <__divsf3+0x18>
 660:	21 f4       	brne	.+8      	; 0x66a <__divsf3+0x16>
 662:	5f 3f       	cpi	r21, 0xFF	; 255
 664:	19 f0       	breq	.+6      	; 0x66c <__divsf3+0x18>
 666:	cc c0       	rjmp	.+408    	; 0x800 <__fp_inf>
 668:	51 11       	cpse	r21, r1
 66a:	15 c1       	rjmp	.+554    	; 0x896 <__fp_szero>
 66c:	cf c0       	rjmp	.+414    	; 0x80c <__fp_nan>

0000066e <__divsf3x>:
 66e:	f0 d0       	rcall	.+480    	; 0x850 <__fp_split3>
 670:	98 f3       	brcs	.-26     	; 0x658 <__divsf3+0x4>

00000672 <__divsf3_pse>:
 672:	99 23       	and	r25, r25
 674:	c9 f3       	breq	.-14     	; 0x668 <__divsf3+0x14>
 676:	55 23       	and	r21, r21
 678:	b1 f3       	breq	.-20     	; 0x666 <__divsf3+0x12>
 67a:	95 1b       	sub	r25, r21
 67c:	55 0b       	sbc	r21, r21
 67e:	bb 27       	eor	r27, r27
 680:	aa 27       	eor	r26, r26
 682:	62 17       	cp	r22, r18
 684:	73 07       	cpc	r23, r19
 686:	84 07       	cpc	r24, r20
 688:	38 f0       	brcs	.+14     	; 0x698 <__divsf3_pse+0x26>
 68a:	9f 5f       	subi	r25, 0xFF	; 255
 68c:	5f 4f       	sbci	r21, 0xFF	; 255
 68e:	22 0f       	add	r18, r18
 690:	33 1f       	adc	r19, r19
 692:	44 1f       	adc	r20, r20
 694:	aa 1f       	adc	r26, r26
 696:	a9 f3       	breq	.-22     	; 0x682 <__divsf3_pse+0x10>
 698:	33 d0       	rcall	.+102    	; 0x700 <__divsf3_pse+0x8e>
 69a:	0e 2e       	mov	r0, r30
 69c:	3a f0       	brmi	.+14     	; 0x6ac <__divsf3_pse+0x3a>
 69e:	e0 e8       	ldi	r30, 0x80	; 128
 6a0:	30 d0       	rcall	.+96     	; 0x702 <__divsf3_pse+0x90>
 6a2:	91 50       	subi	r25, 0x01	; 1
 6a4:	50 40       	sbci	r21, 0x00	; 0
 6a6:	e6 95       	lsr	r30
 6a8:	00 1c       	adc	r0, r0
 6aa:	ca f7       	brpl	.-14     	; 0x69e <__divsf3_pse+0x2c>
 6ac:	29 d0       	rcall	.+82     	; 0x700 <__divsf3_pse+0x8e>
 6ae:	fe 2f       	mov	r31, r30
 6b0:	27 d0       	rcall	.+78     	; 0x700 <__divsf3_pse+0x8e>
 6b2:	66 0f       	add	r22, r22
 6b4:	77 1f       	adc	r23, r23
 6b6:	88 1f       	adc	r24, r24
 6b8:	bb 1f       	adc	r27, r27
 6ba:	26 17       	cp	r18, r22
 6bc:	37 07       	cpc	r19, r23
 6be:	48 07       	cpc	r20, r24
 6c0:	ab 07       	cpc	r26, r27
 6c2:	b0 e8       	ldi	r27, 0x80	; 128
 6c4:	09 f0       	breq	.+2      	; 0x6c8 <__divsf3_pse+0x56>
 6c6:	bb 0b       	sbc	r27, r27
 6c8:	80 2d       	mov	r24, r0
 6ca:	bf 01       	movw	r22, r30
 6cc:	ff 27       	eor	r31, r31
 6ce:	93 58       	subi	r25, 0x83	; 131
 6d0:	5f 4f       	sbci	r21, 0xFF	; 255
 6d2:	2a f0       	brmi	.+10     	; 0x6de <__divsf3_pse+0x6c>
 6d4:	9e 3f       	cpi	r25, 0xFE	; 254
 6d6:	51 05       	cpc	r21, r1
 6d8:	68 f0       	brcs	.+26     	; 0x6f4 <__divsf3_pse+0x82>
 6da:	92 c0       	rjmp	.+292    	; 0x800 <__fp_inf>
 6dc:	dc c0       	rjmp	.+440    	; 0x896 <__fp_szero>
 6de:	5f 3f       	cpi	r21, 0xFF	; 255
 6e0:	ec f3       	brlt	.-6      	; 0x6dc <__divsf3_pse+0x6a>
 6e2:	98 3e       	cpi	r25, 0xE8	; 232
 6e4:	dc f3       	brlt	.-10     	; 0x6dc <__divsf3_pse+0x6a>
 6e6:	86 95       	lsr	r24
 6e8:	77 95       	ror	r23
 6ea:	67 95       	ror	r22
 6ec:	b7 95       	ror	r27
 6ee:	f7 95       	ror	r31
 6f0:	9f 5f       	subi	r25, 0xFF	; 255
 6f2:	c9 f7       	brne	.-14     	; 0x6e6 <__divsf3_pse+0x74>
 6f4:	88 0f       	add	r24, r24
 6f6:	91 1d       	adc	r25, r1
 6f8:	96 95       	lsr	r25
 6fa:	87 95       	ror	r24
 6fc:	97 f9       	bld	r25, 7
 6fe:	08 95       	ret
 700:	e1 e0       	ldi	r30, 0x01	; 1
 702:	66 0f       	add	r22, r22
 704:	77 1f       	adc	r23, r23
 706:	88 1f       	adc	r24, r24
 708:	bb 1f       	adc	r27, r27
 70a:	62 17       	cp	r22, r18
 70c:	73 07       	cpc	r23, r19
 70e:	84 07       	cpc	r24, r20
 710:	ba 07       	cpc	r27, r26
 712:	20 f0       	brcs	.+8      	; 0x71c <__divsf3_pse+0xaa>
 714:	62 1b       	sub	r22, r18
 716:	73 0b       	sbc	r23, r19
 718:	84 0b       	sbc	r24, r20
 71a:	ba 0b       	sbc	r27, r26
 71c:	ee 1f       	adc	r30, r30
 71e:	88 f7       	brcc	.-30     	; 0x702 <__divsf3_pse+0x90>
 720:	e0 95       	com	r30
 722:	08 95       	ret

00000724 <__fixsfsi>:
 724:	04 d0       	rcall	.+8      	; 0x72e <__fixunssfsi>
 726:	68 94       	set
 728:	b1 11       	cpse	r27, r1
 72a:	b5 c0       	rjmp	.+362    	; 0x896 <__fp_szero>
 72c:	08 95       	ret

0000072e <__fixunssfsi>:
 72e:	98 d0       	rcall	.+304    	; 0x860 <__fp_splitA>
 730:	88 f0       	brcs	.+34     	; 0x754 <__fixunssfsi+0x26>
 732:	9f 57       	subi	r25, 0x7F	; 127
 734:	90 f0       	brcs	.+36     	; 0x75a <__fixunssfsi+0x2c>
 736:	b9 2f       	mov	r27, r25
 738:	99 27       	eor	r25, r25
 73a:	b7 51       	subi	r27, 0x17	; 23
 73c:	a0 f0       	brcs	.+40     	; 0x766 <__fixunssfsi+0x38>
 73e:	d1 f0       	breq	.+52     	; 0x774 <__fixunssfsi+0x46>
 740:	66 0f       	add	r22, r22
 742:	77 1f       	adc	r23, r23
 744:	88 1f       	adc	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	1a f0       	brmi	.+6      	; 0x750 <__fixunssfsi+0x22>
 74a:	ba 95       	dec	r27
 74c:	c9 f7       	brne	.-14     	; 0x740 <__fixunssfsi+0x12>
 74e:	12 c0       	rjmp	.+36     	; 0x774 <__fixunssfsi+0x46>
 750:	b1 30       	cpi	r27, 0x01	; 1
 752:	81 f0       	breq	.+32     	; 0x774 <__fixunssfsi+0x46>
 754:	9f d0       	rcall	.+318    	; 0x894 <__fp_zero>
 756:	b1 e0       	ldi	r27, 0x01	; 1
 758:	08 95       	ret
 75a:	9c c0       	rjmp	.+312    	; 0x894 <__fp_zero>
 75c:	67 2f       	mov	r22, r23
 75e:	78 2f       	mov	r23, r24
 760:	88 27       	eor	r24, r24
 762:	b8 5f       	subi	r27, 0xF8	; 248
 764:	39 f0       	breq	.+14     	; 0x774 <__fixunssfsi+0x46>
 766:	b9 3f       	cpi	r27, 0xF9	; 249
 768:	cc f3       	brlt	.-14     	; 0x75c <__fixunssfsi+0x2e>
 76a:	86 95       	lsr	r24
 76c:	77 95       	ror	r23
 76e:	67 95       	ror	r22
 770:	b3 95       	inc	r27
 772:	d9 f7       	brne	.-10     	; 0x76a <__fixunssfsi+0x3c>
 774:	3e f4       	brtc	.+14     	; 0x784 <__fixunssfsi+0x56>
 776:	90 95       	com	r25
 778:	80 95       	com	r24
 77a:	70 95       	com	r23
 77c:	61 95       	neg	r22
 77e:	7f 4f       	sbci	r23, 0xFF	; 255
 780:	8f 4f       	sbci	r24, 0xFF	; 255
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	08 95       	ret

00000786 <__floatunsisf>:
 786:	e8 94       	clt
 788:	09 c0       	rjmp	.+18     	; 0x79c <__floatsisf+0x12>

0000078a <__floatsisf>:
 78a:	97 fb       	bst	r25, 7
 78c:	3e f4       	brtc	.+14     	; 0x79c <__floatsisf+0x12>
 78e:	90 95       	com	r25
 790:	80 95       	com	r24
 792:	70 95       	com	r23
 794:	61 95       	neg	r22
 796:	7f 4f       	sbci	r23, 0xFF	; 255
 798:	8f 4f       	sbci	r24, 0xFF	; 255
 79a:	9f 4f       	sbci	r25, 0xFF	; 255
 79c:	99 23       	and	r25, r25
 79e:	a9 f0       	breq	.+42     	; 0x7ca <__floatsisf+0x40>
 7a0:	f9 2f       	mov	r31, r25
 7a2:	96 e9       	ldi	r25, 0x96	; 150
 7a4:	bb 27       	eor	r27, r27
 7a6:	93 95       	inc	r25
 7a8:	f6 95       	lsr	r31
 7aa:	87 95       	ror	r24
 7ac:	77 95       	ror	r23
 7ae:	67 95       	ror	r22
 7b0:	b7 95       	ror	r27
 7b2:	f1 11       	cpse	r31, r1
 7b4:	f8 cf       	rjmp	.-16     	; 0x7a6 <__floatsisf+0x1c>
 7b6:	fa f4       	brpl	.+62     	; 0x7f6 <__floatsisf+0x6c>
 7b8:	bb 0f       	add	r27, r27
 7ba:	11 f4       	brne	.+4      	; 0x7c0 <__floatsisf+0x36>
 7bc:	60 ff       	sbrs	r22, 0
 7be:	1b c0       	rjmp	.+54     	; 0x7f6 <__floatsisf+0x6c>
 7c0:	6f 5f       	subi	r22, 0xFF	; 255
 7c2:	7f 4f       	sbci	r23, 0xFF	; 255
 7c4:	8f 4f       	sbci	r24, 0xFF	; 255
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	16 c0       	rjmp	.+44     	; 0x7f6 <__floatsisf+0x6c>
 7ca:	88 23       	and	r24, r24
 7cc:	11 f0       	breq	.+4      	; 0x7d2 <__floatsisf+0x48>
 7ce:	96 e9       	ldi	r25, 0x96	; 150
 7d0:	11 c0       	rjmp	.+34     	; 0x7f4 <__floatsisf+0x6a>
 7d2:	77 23       	and	r23, r23
 7d4:	21 f0       	breq	.+8      	; 0x7de <__floatsisf+0x54>
 7d6:	9e e8       	ldi	r25, 0x8E	; 142
 7d8:	87 2f       	mov	r24, r23
 7da:	76 2f       	mov	r23, r22
 7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <__floatsisf+0x5e>
 7de:	66 23       	and	r22, r22
 7e0:	71 f0       	breq	.+28     	; 0x7fe <__floatsisf+0x74>
 7e2:	96 e8       	ldi	r25, 0x86	; 134
 7e4:	86 2f       	mov	r24, r22
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	2a f0       	brmi	.+10     	; 0x7f6 <__floatsisf+0x6c>
 7ec:	9a 95       	dec	r25
 7ee:	66 0f       	add	r22, r22
 7f0:	77 1f       	adc	r23, r23
 7f2:	88 1f       	adc	r24, r24
 7f4:	da f7       	brpl	.-10     	; 0x7ec <__floatsisf+0x62>
 7f6:	88 0f       	add	r24, r24
 7f8:	96 95       	lsr	r25
 7fa:	87 95       	ror	r24
 7fc:	97 f9       	bld	r25, 7
 7fe:	08 95       	ret

00000800 <__fp_inf>:
 800:	97 f9       	bld	r25, 7
 802:	9f 67       	ori	r25, 0x7F	; 127
 804:	80 e8       	ldi	r24, 0x80	; 128
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	08 95       	ret

0000080c <__fp_nan>:
 80c:	9f ef       	ldi	r25, 0xFF	; 255
 80e:	80 ec       	ldi	r24, 0xC0	; 192
 810:	08 95       	ret

00000812 <__fp_pscA>:
 812:	00 24       	eor	r0, r0
 814:	0a 94       	dec	r0
 816:	16 16       	cp	r1, r22
 818:	17 06       	cpc	r1, r23
 81a:	18 06       	cpc	r1, r24
 81c:	09 06       	cpc	r0, r25
 81e:	08 95       	ret

00000820 <__fp_pscB>:
 820:	00 24       	eor	r0, r0
 822:	0a 94       	dec	r0
 824:	12 16       	cp	r1, r18
 826:	13 06       	cpc	r1, r19
 828:	14 06       	cpc	r1, r20
 82a:	05 06       	cpc	r0, r21
 82c:	08 95       	ret

0000082e <__fp_round>:
 82e:	09 2e       	mov	r0, r25
 830:	03 94       	inc	r0
 832:	00 0c       	add	r0, r0
 834:	11 f4       	brne	.+4      	; 0x83a <__fp_round+0xc>
 836:	88 23       	and	r24, r24
 838:	52 f0       	brmi	.+20     	; 0x84e <__fp_round+0x20>
 83a:	bb 0f       	add	r27, r27
 83c:	40 f4       	brcc	.+16     	; 0x84e <__fp_round+0x20>
 83e:	bf 2b       	or	r27, r31
 840:	11 f4       	brne	.+4      	; 0x846 <__fp_round+0x18>
 842:	60 ff       	sbrs	r22, 0
 844:	04 c0       	rjmp	.+8      	; 0x84e <__fp_round+0x20>
 846:	6f 5f       	subi	r22, 0xFF	; 255
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	08 95       	ret

00000850 <__fp_split3>:
 850:	57 fd       	sbrc	r21, 7
 852:	90 58       	subi	r25, 0x80	; 128
 854:	44 0f       	add	r20, r20
 856:	55 1f       	adc	r21, r21
 858:	59 f0       	breq	.+22     	; 0x870 <__fp_splitA+0x10>
 85a:	5f 3f       	cpi	r21, 0xFF	; 255
 85c:	71 f0       	breq	.+28     	; 0x87a <__fp_splitA+0x1a>
 85e:	47 95       	ror	r20

00000860 <__fp_splitA>:
 860:	88 0f       	add	r24, r24
 862:	97 fb       	bst	r25, 7
 864:	99 1f       	adc	r25, r25
 866:	61 f0       	breq	.+24     	; 0x880 <__fp_splitA+0x20>
 868:	9f 3f       	cpi	r25, 0xFF	; 255
 86a:	79 f0       	breq	.+30     	; 0x88a <__fp_splitA+0x2a>
 86c:	87 95       	ror	r24
 86e:	08 95       	ret
 870:	12 16       	cp	r1, r18
 872:	13 06       	cpc	r1, r19
 874:	14 06       	cpc	r1, r20
 876:	55 1f       	adc	r21, r21
 878:	f2 cf       	rjmp	.-28     	; 0x85e <__fp_split3+0xe>
 87a:	46 95       	lsr	r20
 87c:	f1 df       	rcall	.-30     	; 0x860 <__fp_splitA>
 87e:	08 c0       	rjmp	.+16     	; 0x890 <__fp_splitA+0x30>
 880:	16 16       	cp	r1, r22
 882:	17 06       	cpc	r1, r23
 884:	18 06       	cpc	r1, r24
 886:	99 1f       	adc	r25, r25
 888:	f1 cf       	rjmp	.-30     	; 0x86c <__fp_splitA+0xc>
 88a:	86 95       	lsr	r24
 88c:	71 05       	cpc	r23, r1
 88e:	61 05       	cpc	r22, r1
 890:	08 94       	sec
 892:	08 95       	ret

00000894 <__fp_zero>:
 894:	e8 94       	clt

00000896 <__fp_szero>:
 896:	bb 27       	eor	r27, r27
 898:	66 27       	eor	r22, r22
 89a:	77 27       	eor	r23, r23
 89c:	cb 01       	movw	r24, r22
 89e:	97 f9       	bld	r25, 7
 8a0:	08 95       	ret

000008a2 <__mulsf3>:
 8a2:	0b d0       	rcall	.+22     	; 0x8ba <__mulsf3x>
 8a4:	c4 cf       	rjmp	.-120    	; 0x82e <__fp_round>
 8a6:	b5 df       	rcall	.-150    	; 0x812 <__fp_pscA>
 8a8:	28 f0       	brcs	.+10     	; 0x8b4 <__mulsf3+0x12>
 8aa:	ba df       	rcall	.-140    	; 0x820 <__fp_pscB>
 8ac:	18 f0       	brcs	.+6      	; 0x8b4 <__mulsf3+0x12>
 8ae:	95 23       	and	r25, r21
 8b0:	09 f0       	breq	.+2      	; 0x8b4 <__mulsf3+0x12>
 8b2:	a6 cf       	rjmp	.-180    	; 0x800 <__fp_inf>
 8b4:	ab cf       	rjmp	.-170    	; 0x80c <__fp_nan>
 8b6:	11 24       	eor	r1, r1
 8b8:	ee cf       	rjmp	.-36     	; 0x896 <__fp_szero>

000008ba <__mulsf3x>:
 8ba:	ca df       	rcall	.-108    	; 0x850 <__fp_split3>
 8bc:	a0 f3       	brcs	.-24     	; 0x8a6 <__mulsf3+0x4>

000008be <__mulsf3_pse>:
 8be:	95 9f       	mul	r25, r21
 8c0:	d1 f3       	breq	.-12     	; 0x8b6 <__mulsf3+0x14>
 8c2:	95 0f       	add	r25, r21
 8c4:	50 e0       	ldi	r21, 0x00	; 0
 8c6:	55 1f       	adc	r21, r21
 8c8:	62 9f       	mul	r22, r18
 8ca:	f0 01       	movw	r30, r0
 8cc:	72 9f       	mul	r23, r18
 8ce:	bb 27       	eor	r27, r27
 8d0:	f0 0d       	add	r31, r0
 8d2:	b1 1d       	adc	r27, r1
 8d4:	63 9f       	mul	r22, r19
 8d6:	aa 27       	eor	r26, r26
 8d8:	f0 0d       	add	r31, r0
 8da:	b1 1d       	adc	r27, r1
 8dc:	aa 1f       	adc	r26, r26
 8de:	64 9f       	mul	r22, r20
 8e0:	66 27       	eor	r22, r22
 8e2:	b0 0d       	add	r27, r0
 8e4:	a1 1d       	adc	r26, r1
 8e6:	66 1f       	adc	r22, r22
 8e8:	82 9f       	mul	r24, r18
 8ea:	22 27       	eor	r18, r18
 8ec:	b0 0d       	add	r27, r0
 8ee:	a1 1d       	adc	r26, r1
 8f0:	62 1f       	adc	r22, r18
 8f2:	73 9f       	mul	r23, r19
 8f4:	b0 0d       	add	r27, r0
 8f6:	a1 1d       	adc	r26, r1
 8f8:	62 1f       	adc	r22, r18
 8fa:	83 9f       	mul	r24, r19
 8fc:	a0 0d       	add	r26, r0
 8fe:	61 1d       	adc	r22, r1
 900:	22 1f       	adc	r18, r18
 902:	74 9f       	mul	r23, r20
 904:	33 27       	eor	r19, r19
 906:	a0 0d       	add	r26, r0
 908:	61 1d       	adc	r22, r1
 90a:	23 1f       	adc	r18, r19
 90c:	84 9f       	mul	r24, r20
 90e:	60 0d       	add	r22, r0
 910:	21 1d       	adc	r18, r1
 912:	82 2f       	mov	r24, r18
 914:	76 2f       	mov	r23, r22
 916:	6a 2f       	mov	r22, r26
 918:	11 24       	eor	r1, r1
 91a:	9f 57       	subi	r25, 0x7F	; 127
 91c:	50 40       	sbci	r21, 0x00	; 0
 91e:	8a f0       	brmi	.+34     	; 0x942 <__mulsf3_pse+0x84>
 920:	e1 f0       	breq	.+56     	; 0x95a <__mulsf3_pse+0x9c>
 922:	88 23       	and	r24, r24
 924:	4a f0       	brmi	.+18     	; 0x938 <__mulsf3_pse+0x7a>
 926:	ee 0f       	add	r30, r30
 928:	ff 1f       	adc	r31, r31
 92a:	bb 1f       	adc	r27, r27
 92c:	66 1f       	adc	r22, r22
 92e:	77 1f       	adc	r23, r23
 930:	88 1f       	adc	r24, r24
 932:	91 50       	subi	r25, 0x01	; 1
 934:	50 40       	sbci	r21, 0x00	; 0
 936:	a9 f7       	brne	.-22     	; 0x922 <__mulsf3_pse+0x64>
 938:	9e 3f       	cpi	r25, 0xFE	; 254
 93a:	51 05       	cpc	r21, r1
 93c:	70 f0       	brcs	.+28     	; 0x95a <__mulsf3_pse+0x9c>
 93e:	60 cf       	rjmp	.-320    	; 0x800 <__fp_inf>
 940:	aa cf       	rjmp	.-172    	; 0x896 <__fp_szero>
 942:	5f 3f       	cpi	r21, 0xFF	; 255
 944:	ec f3       	brlt	.-6      	; 0x940 <__mulsf3_pse+0x82>
 946:	98 3e       	cpi	r25, 0xE8	; 232
 948:	dc f3       	brlt	.-10     	; 0x940 <__mulsf3_pse+0x82>
 94a:	86 95       	lsr	r24
 94c:	77 95       	ror	r23
 94e:	67 95       	ror	r22
 950:	b7 95       	ror	r27
 952:	f7 95       	ror	r31
 954:	e7 95       	ror	r30
 956:	9f 5f       	subi	r25, 0xFF	; 255
 958:	c1 f7       	brne	.-16     	; 0x94a <__mulsf3_pse+0x8c>
 95a:	fe 2b       	or	r31, r30
 95c:	88 0f       	add	r24, r24
 95e:	91 1d       	adc	r25, r1
 960:	96 95       	lsr	r25
 962:	87 95       	ror	r24
 964:	97 f9       	bld	r25, 7
 966:	08 95       	ret

00000968 <_exit>:
 968:	f8 94       	cli

0000096a <__stop_program>:
 96a:	ff cf       	rjmp	.-2      	; 0x96a <__stop_program>

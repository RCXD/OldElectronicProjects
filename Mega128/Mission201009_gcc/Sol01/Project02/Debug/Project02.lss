
Project02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002b6  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010a  0080010a  00000354  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c97  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091b  00000000  00000000  000010f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000525  00000000  00000000  00001a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ec  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000333  00000000  00000000  00002558  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000288b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 eb       	ldi	r30, 0xB6	; 182
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e0       	ldi	r26, 0x0A	; 10
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b7 d0       	rcall	.+366    	; 0x232 <main>
  c4:	f6 c0       	rjmp	.+492    	; 0x2b2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
	return;
}
void Calculate(int* data, float* bpm){
	return;
}
void GLCD_update(int* adc, float* bpm){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <loop.1737>
  da:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <loop.1737+0x1>
  de:	84 36       	cpi	r24, 0x64	; 100
  e0:	91 05       	cpc	r25, r1
  e2:	30 f4       	brcc	.+12     	; 0xf0 <__vector_16+0x28>
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <loop.1737+0x1>
  ea:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <loop.1737>
  ee:	07 c0       	rjmp	.+14     	; 0xfe <__vector_16+0x36>
  f0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <loop.1737+0x1>
  f4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <loop.1737>
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <TimerFlag>
  fe:	8c e3       	ldi	r24, 0x3C	; 60
 100:	82 bf       	out	0x32, r24	; 50
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <Timer0_init>:
 110:	87 e0       	ldi	r24, 0x07	; 7
 112:	83 bf       	out	0x33, r24	; 51
 114:	8c e3       	ldi	r24, 0x3C	; 60
 116:	82 bf       	out	0x32, r24	; 50
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	87 bf       	out	0x37, r24	; 55
 11c:	78 94       	sei
 11e:	08 95       	ret

00000120 <FND_init>:
 120:	82 b1       	in	r24, 0x02	; 2
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	82 b9       	out	0x02, r24	; 2
 126:	9f e0       	ldi	r25, 0x0F	; 15
 128:	94 bb       	out	0x14, r25	; 20
 12a:	13 b8       	out	0x03, r1	; 3
 12c:	ef ec       	ldi	r30, 0xCF	; 207
 12e:	f7 e0       	ldi	r31, 0x07	; 7
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <FND_init+0x10>
 134:	00 c0       	rjmp	.+0      	; 0x136 <FND_init+0x16>
 136:	00 00       	nop
 138:	83 b9       	out	0x03, r24	; 3
 13a:	85 bb       	out	0x15, r24	; 21
 13c:	8b bb       	out	0x1b, r24	; 27
 13e:	ff ef       	ldi	r31, 0xFF	; 255
 140:	24 e3       	ldi	r18, 0x34	; 52
 142:	3c e0       	ldi	r19, 0x0C	; 12
 144:	f1 50       	subi	r31, 0x01	; 1
 146:	20 40       	sbci	r18, 0x00	; 0
 148:	30 40       	sbci	r19, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <FND_init+0x24>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <FND_init+0x2e>
 14e:	00 00       	nop
 150:	13 b8       	out	0x03, r1	; 3
 152:	15 ba       	out	0x15, r1	; 21
 154:	1b ba       	out	0x1b, r1	; 27
 156:	9f ef       	ldi	r25, 0xFF	; 255
 158:	e4 e3       	ldi	r30, 0x34	; 52
 15a:	fc e0       	ldi	r31, 0x0C	; 12
 15c:	91 50       	subi	r25, 0x01	; 1
 15e:	e0 40       	sbci	r30, 0x00	; 0
 160:	f0 40       	sbci	r31, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <FND_init+0x3c>
 164:	00 c0       	rjmp	.+0      	; 0x166 <FND_init+0x46>
 166:	00 00       	nop
 168:	83 b9       	out	0x03, r24	; 3
 16a:	85 bb       	out	0x15, r24	; 21
 16c:	8b bb       	out	0x1b, r24	; 27
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	34 e3       	ldi	r19, 0x34	; 52
 172:	8c e0       	ldi	r24, 0x0C	; 12
 174:	21 50       	subi	r18, 0x01	; 1
 176:	30 40       	sbci	r19, 0x00	; 0
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <FND_init+0x54>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <FND_init+0x5e>
 17e:	00 00       	nop
 180:	08 95       	ret

00000182 <FND_update>:
	
	
	//delay: 72us(540kHz)
	return;
}
void FND_update(int* num){
 182:	fc 01       	movw	r30, r24
	static unsigned int state = 0;
	if(TimerFlag){
 184:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <TimerFlag>
 188:	99 23       	and	r25, r25
 18a:	09 f4       	brne	.+2      	; 0x18e <FND_update+0xc>
 18c:	4e c0       	rjmp	.+156    	; 0x22a <FND_update+0xa8>
		switch(state){
 18e:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
 192:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
 196:	21 30       	cpi	r18, 0x01	; 1
 198:	31 05       	cpc	r19, r1
 19a:	f1 f0       	breq	.+60     	; 0x1d8 <FND_update+0x56>
 19c:	20 f0       	brcs	.+8      	; 0x1a6 <FND_update+0x24>
 19e:	22 30       	cpi	r18, 0x02	; 2
 1a0:	31 05       	cpc	r19, r1
 1a2:	99 f1       	breq	.+102    	; 0x20a <FND_update+0x88>
 1a4:	08 95       	ret
			case 0:
			PORTC = 0x04;
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	85 bb       	out	0x15, r24	; 21
			PORTE = FND_fonts[(int)(*num)%1000/100];
 1aa:	80 81       	ld	r24, Z
 1ac:	91 81       	ldd	r25, Z+1	; 0x01
 1ae:	68 ee       	ldi	r22, 0xE8	; 232
 1b0:	73 e0       	ldi	r23, 0x03	; 3
 1b2:	58 d0       	rcall	.+176    	; 0x264 <__divmodhi4>
 1b4:	64 e6       	ldi	r22, 0x64	; 100
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	55 d0       	rcall	.+170    	; 0x264 <__divmodhi4>
 1ba:	fb 01       	movw	r30, r22
 1bc:	e0 50       	subi	r30, 0x00	; 0
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	80 81       	ld	r24, Z
 1c2:	83 b9       	out	0x03, r24	; 3
			state++;
 1c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1c8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1d2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
			break;
 1d6:	08 95       	ret
			case 1:
			PORTC = 0x02;
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	85 bb       	out	0x15, r24	; 21
			PORTE = FND_fonts[(int)(*num)%100/10];
 1dc:	80 81       	ld	r24, Z
 1de:	91 81       	ldd	r25, Z+1	; 0x01
 1e0:	64 e6       	ldi	r22, 0x64	; 100
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	3f d0       	rcall	.+126    	; 0x264 <__divmodhi4>
 1e6:	6a e0       	ldi	r22, 0x0A	; 10
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	3c d0       	rcall	.+120    	; 0x264 <__divmodhi4>
 1ec:	fb 01       	movw	r30, r22
 1ee:	e0 50       	subi	r30, 0x00	; 0
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	80 81       	ld	r24, Z
 1f4:	83 b9       	out	0x03, r24	; 3
			state++;
 1f6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1fa:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 204:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
			break;
 208:	08 95       	ret
			case 2:
			PORTC = 0x01;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	85 bb       	out	0x15, r24	; 21
			PORTE = FND_fonts[(int)(*num)%10];
 20e:	80 81       	ld	r24, Z
 210:	91 81       	ldd	r25, Z+1	; 0x01
 212:	6a e0       	ldi	r22, 0x0A	; 10
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	26 d0       	rcall	.+76     	; 0x264 <__divmodhi4>
 218:	fc 01       	movw	r30, r24
 21a:	e0 50       	subi	r30, 0x00	; 0
 21c:	ff 4f       	sbci	r31, 0xFF	; 255
 21e:	80 81       	ld	r24, Z
 220:	83 b9       	out	0x03, r24	; 3
			state = 0;
 222:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 226:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
 22a:	08 95       	ret

0000022c <setup>:

void setup(){
	//SPI_init();
	//ADC_init();
	//GLCD_init();
	Timer0_init();
 22c:	71 df       	rcall	.-286    	; 0x110 <Timer0_init>
	FND_init();
 22e:	78 cf       	rjmp	.-272    	; 0x120 <FND_init>
 230:	08 95       	ret

00000232 <main>:
 232:	cf 93       	push	r28
}

/////////////////////////////////////////////////////////
int main(void) {
 234:	df 93       	push	r29
 236:	00 d0       	rcall	.+0      	; 0x238 <main+0x6>
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
	//float bpm = 0.0;
	//int adc = 0;
	DDRC = 0xff;
 23c:	8f ef       	ldi	r24, 0xFF	; 255
 23e:	84 bb       	out	0x14, r24	; 20
	DDRE = 0xff;
 240:	82 b9       	out	0x02, r24	; 2
	PORTC = 0xff;
 242:	85 bb       	out	0x15, r24	; 21
	PORTE = 0x00;
 244:	13 b8       	out	0x03, r1	; 3
	
	
	setup();
 246:	f2 df       	rcall	.-28     	; 0x22c <setup>
	
	
	while (1)
	{
		int data = 1234;//Temp
 248:	02 ed       	ldi	r16, 0xD2	; 210
 24a:	14 e0       	ldi	r17, 0x04	; 4
 24c:	1a 83       	std	Y+2, r17	; 0x02
 24e:	09 83       	std	Y+1, r16	; 0x01
		//ADC Read(&data)
		//Calculate(&adc, &bpm);
		//GLCD_update(&data);
		if(TimerFlag){
 250:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <TimerFlag>
 254:	88 23       	and	r24, r24
 256:	d1 f3       	breq	.-12     	; 0x24c <main+0x1a>
			FND_update(&data);
 258:	ce 01       	movw	r24, r28
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	92 df       	rcall	.-220    	; 0x182 <FND_update>
			TimerFlag = 0;
 25e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <TimerFlag>
		}
	}
 262:	f4 cf       	rjmp	.-24     	; 0x24c <main+0x1a>

00000264 <__divmodhi4>:
 264:	97 fb       	bst	r25, 7
 266:	07 2e       	mov	r0, r23
 268:	16 f4       	brtc	.+4      	; 0x26e <__divmodhi4+0xa>
 26a:	00 94       	com	r0
 26c:	06 d0       	rcall	.+12     	; 0x27a <__divmodhi4_neg1>
 26e:	77 fd       	sbrc	r23, 7
 270:	08 d0       	rcall	.+16     	; 0x282 <__divmodhi4_neg2>
 272:	0b d0       	rcall	.+22     	; 0x28a <__udivmodhi4>
 274:	07 fc       	sbrc	r0, 7
 276:	05 d0       	rcall	.+10     	; 0x282 <__divmodhi4_neg2>
 278:	3e f4       	brtc	.+14     	; 0x288 <__divmodhi4_exit>

0000027a <__divmodhi4_neg1>:
 27a:	90 95       	com	r25
 27c:	81 95       	neg	r24
 27e:	9f 4f       	sbci	r25, 0xFF	; 255
 280:	08 95       	ret

00000282 <__divmodhi4_neg2>:
 282:	70 95       	com	r23
 284:	61 95       	neg	r22
 286:	7f 4f       	sbci	r23, 0xFF	; 255

00000288 <__divmodhi4_exit>:
 288:	08 95       	ret

0000028a <__udivmodhi4>:
 28a:	aa 1b       	sub	r26, r26
 28c:	bb 1b       	sub	r27, r27
 28e:	51 e1       	ldi	r21, 0x11	; 17
 290:	07 c0       	rjmp	.+14     	; 0x2a0 <__udivmodhi4_ep>

00000292 <__udivmodhi4_loop>:
 292:	aa 1f       	adc	r26, r26
 294:	bb 1f       	adc	r27, r27
 296:	a6 17       	cp	r26, r22
 298:	b7 07       	cpc	r27, r23
 29a:	10 f0       	brcs	.+4      	; 0x2a0 <__udivmodhi4_ep>
 29c:	a6 1b       	sub	r26, r22
 29e:	b7 0b       	sbc	r27, r23

000002a0 <__udivmodhi4_ep>:
 2a0:	88 1f       	adc	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	5a 95       	dec	r21
 2a6:	a9 f7       	brne	.-22     	; 0x292 <__udivmodhi4_loop>
 2a8:	80 95       	com	r24
 2aa:	90 95       	com	r25
 2ac:	bc 01       	movw	r22, r24
 2ae:	cd 01       	movw	r24, r26
 2b0:	08 95       	ret

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>

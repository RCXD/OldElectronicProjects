
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000188  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  0000022c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f0  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082b  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fe  00000000  00000000  000013df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  000016e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007d  00000000  00000000  00001b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001bfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 31       	cpi	r26, 0x14	; 20
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	49 d0       	rcall	.+146    	; 0x156 <main>
  c4:	5f c0       	rjmp	.+190    	; 0x184 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
unsigned char SEG[16] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8,
						 0x80, 0x90, 0x88, 0x83, 0xc6, 0xa1, 0x86, 0x8e};

int n, loop;
ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
	if(loop < 2) loop++;
  e2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <loop>
  e6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <loop+0x1>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	91 05       	cpc	r25, r1
  ee:	34 f4       	brge	.+12     	; 0xfc <__vector_16+0x34>
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <loop+0x1>
  f6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <loop>
  fa:	1e c0       	rjmp	.+60     	; 0x138 <__vector_16+0x70>
	else{
		loop=0;
  fc:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <loop+0x1>
 100:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <loop>
		PORTE = SEG[n++];
 104:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 108:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 10c:	9c 01       	movw	r18, r24
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	3f 4f       	sbci	r19, 0xFF	; 255
 112:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <__data_end+0x1>
 116:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <__data_end>
 11a:	fc 01       	movw	r30, r24
 11c:	e0 50       	subi	r30, 0x00	; 0
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	80 81       	ld	r24, Z
 122:	83 b9       	out	0x03, r24	; 3
		if(n>=10) n=0;
 124:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 128:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 12c:	0a 97       	sbiw	r24, 0x0a	; 10
 12e:	24 f0       	brlt	.+8      	; 0x138 <__vector_16+0x70>
 130:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 134:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
	}
	TCNT0 = 112;
 138:	80 e7       	ldi	r24, 0x70	; 112
 13a:	82 bf       	out	0x32, r24	; 50
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0b be       	out	0x3b, r0	; 59
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <main>:

int main(void){
	DDRE = 0xff;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xff;
 15a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xff;
 15c:	85 bb       	out	0x15, r24	; 21
	PORTE = 0x00;
 15e:	13 b8       	out	0x03, r1	; 3
	TCCR0 = 0b00000111;
 160:	87 e0       	ldi	r24, 0x07	; 7
 162:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 112;
 164:	80 e7       	ldi	r24, 0x70	; 112
 166:	82 bf       	out	0x32, r24	; 50
	TIMSK = 0b00000001;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	87 bf       	out	0x37, r24	; 55
	SREG = 0x80;
 16c:	80 e8       	ldi	r24, 0x80	; 128
 16e:	8f bf       	out	0x3f, r24	; 63
	
	while(1){
		PORTE ^= 0xff;
 170:	83 b1       	in	r24, 0x03	; 3
 172:	80 95       	com	r24
 174:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 176:	87 ea       	ldi	r24, 0xA7	; 167
 178:	91 e6       	ldi	r25, 0x61	; 97
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0x24>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x2a>
 180:	00 00       	nop
 182:	f6 cf       	rjmp	.-20     	; 0x170 <main+0x1a>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>

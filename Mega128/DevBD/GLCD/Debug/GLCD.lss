
GLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c93  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f8  00000000  00000000  00000fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000490  00000000  00000000  0000189f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  00001d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b2  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000293  00000000  00000000  0000231a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000025ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__vector_14>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	85 d0       	rcall	.+266    	; 0x1a4 <main>
  9a:	8c c0       	rjmp	.+280    	; 0x1b4 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <__vector_14>:
	sei();        // Enable global interrupts by setting global interrupt enable bit in SREG
	return;
}

//Core functions//
void GLCD_Plot(char y[128]){
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	8c e7       	ldi	r24, 0x7C	; 124
  ae:	91 ee       	ldi	r25, 0xE1	; 225
  b0:	9d bd       	out	0x2d, r25	; 45
  b2:	8c bd       	out	0x2c, r24	; 44
  b4:	9f 91       	pop	r25
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <TI_init>:
  c2:	8c e7       	ldi	r24, 0x7C	; 124
  c4:	91 ee       	ldi	r25, 0xE1	; 225
  c6:	9d bd       	out	0x2d, r25	; 45
  c8:	8c bd       	out	0x2c, r24	; 44
  ca:	1f bc       	out	0x2f, r1	; 47
  cc:	85 e0       	ldi	r24, 0x05	; 5
  ce:	8e bd       	out	0x2e, r24	; 46
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	87 bf       	out	0x37, r24	; 55
  d4:	78 94       	sei
  d6:	08 95       	ret

000000d8 <GLCD_Command>:
	  
	return;
}
void GLCD_Command(char Command){
	Data_Port = Command;		/* Copy command on data pin */
  d8:	85 bb       	out	0x15, r24	; 21
	Command_Port &= ~(1 << RS);	/* Make RS LOW for command register*/
  da:	e2 e6       	ldi	r30, 0x62	; 98
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8f 7e       	andi	r24, 0xEF	; 239
  e2:	80 83       	st	Z, r24
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
  e4:	80 81       	ld	r24, Z
  e6:	87 7f       	andi	r24, 0xF7	; 247
  e8:	80 83       	st	Z, r24
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
  ea:	80 81       	ld	r24, Z
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	8d e0       	ldi	r24, 0x0D	; 13
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <GLCD_Command+0x1a>
  f6:	00 00       	nop
	_delay_us(5);
	Command_Port &= ~(1 << EN);
  f8:	80 81       	ld	r24, Z
  fa:	8f 7d       	andi	r24, 0xDF	; 223
  fc:	80 83       	st	Z, r24
  fe:	8d e0       	ldi	r24, 0x0D	; 13
 100:	8a 95       	dec	r24
 102:	f1 f7       	brne	.-4      	; 0x100 <GLCD_Command+0x28>
 104:	00 00       	nop
 106:	08 95       	ret

00000108 <GLCD_init>:
//initiation//
void BD_init(void){
	return;
}
void GLCD_init(void){
	Data_Port_Dir = 0xFF;
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	84 bb       	out	0x14, r24	; 20
	Command_Port_Dir = 0xFF;
 10c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
 110:	e2 e6       	ldi	r30, 0x62	; 98
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	87 60       	ori	r24, 0x07	; 7
 118:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	8f e3       	ldi	r24, 0x3F	; 63
 11c:	9c e9       	ldi	r25, 0x9C	; 156
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <GLCD_init+0x16>
 122:	00 c0       	rjmp	.+0      	; 0x124 <GLCD_init+0x1c>
 124:	00 00       	nop
	_delay_ms(20);
	GLCD_Command(0x3E);		/* Display OFF */
 126:	8e e3       	ldi	r24, 0x3E	; 62
 128:	d7 df       	rcall	.-82     	; 0xd8 <GLCD_Command>
	GLCD_Command(0x40);		/* Set Y address (column=0) */
 12a:	80 e4       	ldi	r24, 0x40	; 64
 12c:	d5 df       	rcall	.-86     	; 0xd8 <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
 12e:	88 eb       	ldi	r24, 0xB8	; 184
 130:	d3 df       	rcall	.-90     	; 0xd8 <GLCD_Command>
	GLCD_Command(0xC0);		/* Set z address (start line=0) */
 132:	80 ec       	ldi	r24, 0xC0	; 192
 134:	d1 df       	rcall	.-94     	; 0xd8 <GLCD_Command>
	GLCD_Command(0x3F);		/* Display ON */
 136:	8f e3       	ldi	r24, 0x3F	; 63
 138:	cf cf       	rjmp	.-98     	; 0xd8 <GLCD_Command>
 13a:	08 95       	ret

0000013c <GLCD_Data>:
 13c:	85 bb       	out	0x15, r24	; 21
	Command_Port &= ~(1 << EN);
	_delay_us(5);
}
void GLCD_Data(char Data){
	Data_Port = Data;		/* Copy data on data pin */
	Command_Port |=  (1 << RS);	/* Make RS HIGH for data register */
 13e:	e2 e6       	ldi	r30, 0x62	; 98
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 61       	ori	r24, 0x10	; 16
 146:	80 83       	st	Z, r24
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
 148:	80 81       	ld	r24, Z
 14a:	87 7f       	andi	r24, 0xF7	; 247
 14c:	80 83       	st	Z, r24
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
 14e:	80 81       	ld	r24, Z
 150:	80 62       	ori	r24, 0x20	; 32
 152:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8d e0       	ldi	r24, 0x0D	; 13
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <GLCD_Data+0x1a>
 15a:	00 00       	nop
	_delay_us(5);
	Command_Port &= ~(1 << EN);
 15c:	80 81       	ld	r24, Z
 15e:	8f 7d       	andi	r24, 0xDF	; 223
 160:	80 83       	st	Z, r24
 162:	8d e0       	ldi	r24, 0x0D	; 13
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <GLCD_Data+0x28>
 168:	00 00       	nop
 16a:	08 95       	ret

0000016c <GLCD_ClearAll>:
	_delay_us(5);
}
void GLCD_ClearAll(void){
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
 172:	e2 e6       	ldi	r30, 0x62	; 98
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	83 60       	ori	r24, 0x03	; 3
 17a:	80 83       	st	Z, r24
 17c:	18 eb       	ldi	r17, 0xB8	; 184
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);/* Increment page */
 17e:	81 2f       	mov	r24, r17
 180:	ab df       	rcall	.-170    	; 0xd8 <GLCD_Command>
 182:	c0 e4       	ldi	r28, 0x40	; 64
 184:	d0 e0       	ldi	r29, 0x00	; 0
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	d9 df       	rcall	.-78     	; 0x13c <GLCD_Data>
 18a:	21 97       	sbiw	r28, 0x01	; 1
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);/* Increment page */
		for(j = 0; j < 64; j++)
 18c:	e1 f7       	brne	.-8      	; 0x186 <GLCD_ClearAll+0x1a>
 18e:	1f 5f       	subi	r17, 0xFF	; 255
}
void GLCD_ClearAll(void){
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
 190:	10 3c       	cpi	r17, 0xC0	; 192
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
		}
	}
	GLCD_Command(0x40);		/* Set Y address (column=0) */
 192:	a9 f7       	brne	.-22     	; 0x17e <GLCD_ClearAll+0x12>
 194:	80 e4       	ldi	r24, 0x40	; 64
	GLCD_Command(0xB8);		/* Set x address (page=0) */
 196:	a0 df       	rcall	.-192    	; 0xd8 <GLCD_Command>
 198:	88 eb       	ldi	r24, 0xB8	; 184
 19a:	9e df       	rcall	.-196    	; 0xd8 <GLCD_Command>
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	08 95       	ret

000001a4 <main>:
void GLCD_String(char page_no, char *str);

int main(void)
{
    BD_init();
	GLCD_init();
 1a4:	b1 df       	rcall	.-158    	; 0x108 <GLCD_init>
	GLCD_ClearAll();
 1a6:	e2 df       	rcall	.-60     	; 0x16c <GLCD_ClearAll>
	TI_init();
 1a8:	8c df       	rcall	.-232    	; 0xc2 <TI_init>
 1aa:	8a e1       	ldi	r24, 0x1A	; 26
 1ac:	8a 95       	dec	r24
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0x8>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0xe>
 1b2:	fb cf       	rjmp	.-10     	; 0x1aa <main+0x6>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>

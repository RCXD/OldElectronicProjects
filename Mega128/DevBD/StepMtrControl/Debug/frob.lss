
frob.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae9  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000084d  00000000  00000000  00000da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000399  00000000  00000000  000015f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000198c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042d  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000248  00000000  00000000  00001dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002045  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	6f d0       	rcall	.+222    	; 0x178 <main>
  9a:	93 c0       	rjmp	.+294    	; 0x1c2 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <step_init>:
#define HALF 1
#define QUARTER 2
#define EIGHTH 3
#define SIXTEENTH 4

void step_init(int mode){
  9e:	9c 01       	movw	r18, r24
    DDRA |= STP_RST|STP_CW|STP_CLK|STP_M2|STP_M1|STP_SYNC;
  a0:	9a b3       	in	r25, 0x1a	; 26
  a2:	9f 65       	ori	r25, 0x5F	; 95
  a4:	9a bb       	out	0x1a, r25	; 26
    DDRA &= ~STP_MOUT;
  a6:	d5 98       	cbi	0x1a, 5	; 26
	//PORTA |= 
	PORTA &= ~( STP_RST|STP_CW|STP_CLK|STP_SYNC );
  a8:	9b b3       	in	r25, 0x1b	; 27
  aa:	98 7b       	andi	r25, 0xB8	; 184
  ac:	9b bb       	out	0x1b, r25	; 27
	
	//debug
	PORTA &= ~0xff;
  ae:	8b b3       	in	r24, 0x1b	; 27
  b0:	1b ba       	out	0x1b, r1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	4f ef       	ldi	r20, 0xFF	; 255
  b4:	59 e6       	ldi	r21, 0x69	; 105
  b6:	88 e1       	ldi	r24, 0x18	; 24
  b8:	41 50       	subi	r20, 0x01	; 1
  ba:	50 40       	sbci	r21, 0x00	; 0
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <step_init+0x1a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <step_init+0x24>
  c2:	00 00       	nop
	_delay_ms(1000);
	PORTA |= 0xff;
  c4:	8b b3       	in	r24, 0x1b	; 27
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	9f ef       	ldi	r25, 0xFF	; 255
  cc:	49 e6       	ldi	r20, 0x69	; 105
  ce:	58 e1       	ldi	r21, 0x18	; 24
  d0:	91 50       	subi	r25, 0x01	; 1
  d2:	40 40       	sbci	r20, 0x00	; 0
  d4:	50 40       	sbci	r21, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <step_init+0x32>
  d8:	00 c0       	rjmp	.+0      	; 0xda <step_init+0x3c>
  da:	00 00       	nop
	_delay_ms(1000);
	PORTA &= ~0xff;
  dc:	9b b3       	in	r25, 0x1b	; 27
  de:	1b ba       	out	0x1b, r1	; 27
  e0:	9f ef       	ldi	r25, 0xFF	; 255
  e2:	49 e6       	ldi	r20, 0x69	; 105
  e4:	58 e1       	ldi	r21, 0x18	; 24
  e6:	91 50       	subi	r25, 0x01	; 1
  e8:	40 40       	sbci	r20, 0x00	; 0
  ea:	50 40       	sbci	r21, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <step_init+0x48>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <step_init+0x52>
  f0:	00 00       	nop
	_delay_ms(1000);
	PORTA |= 0xff;
  f2:	9b b3       	in	r25, 0x1b	; 27
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	99 e6       	ldi	r25, 0x69	; 105
  fa:	48 e1       	ldi	r20, 0x18	; 24
  fc:	81 50       	subi	r24, 0x01	; 1
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	40 40       	sbci	r20, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <step_init+0x5e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <step_init+0x68>
 106:	00 00       	nop
	_delay_ms(1000);
	
    switch(mode)
 108:	22 30       	cpi	r18, 0x02	; 2
 10a:	31 05       	cpc	r19, r1
 10c:	81 f0       	breq	.+32     	; 0x12e <step_init+0x90>
 10e:	24 f4       	brge	.+8      	; 0x118 <step_init+0x7a>
 110:	21 30       	cpi	r18, 0x01	; 1
 112:	31 05       	cpc	r19, r1
 114:	41 f0       	breq	.+16     	; 0x126 <step_init+0x88>
 116:	08 95       	ret
 118:	23 30       	cpi	r18, 0x03	; 3
 11a:	31 05       	cpc	r19, r1
 11c:	59 f0       	breq	.+22     	; 0x134 <step_init+0x96>
 11e:	24 30       	cpi	r18, 0x04	; 4
 120:	31 05       	cpc	r19, r1
 122:	59 f0       	breq	.+22     	; 0x13a <step_init+0x9c>
 124:	08 95       	ret
    {
        case HALF:
            //Set M1-M2 to 1-1
            PORTA |= STP_M1|STP_M2;
 126:	8b b3       	in	r24, 0x1b	; 27
 128:	88 61       	ori	r24, 0x18	; 24
 12a:	8b bb       	out	0x1b, r24	; 27
			break;
 12c:	08 95       	ret
        case QUARTER:
            //Set M1-M2 to 1-0
            PORTA |= STP_M1;
 12e:	dc 9a       	sbi	0x1b, 4	; 27
            PORTA &= ~STP_M2;
 130:	db 98       	cbi	0x1b, 3	; 27
			break;
 132:	08 95       	ret
        case EIGHTH:
            //Set M1-M2 to 0-1
            PORTA &= ~STP_M1;
 134:	dc 98       	cbi	0x1b, 4	; 27
            PORTA |= STP_M2;
 136:	db 9a       	sbi	0x1b, 3	; 27
			break;
 138:	08 95       	ret
        case SIXTEENTH:
            //Set M1-M2 to 0-0
            PORTA &= ~(STP_M1&STP_M2);
 13a:	8b b3       	in	r24, 0x1b	; 27
 13c:	8b bb       	out	0x1b, r24	; 27
 13e:	08 95       	ret

00000140 <step_single>:
    }
}

//void step_single(int pulses, const int duty_ms){
void step_single(int pulses){
	while(pulses >=0){
 140:	99 23       	and	r25, r25
 142:	cc f0       	brlt	.+50     	; 0x176 <step_single+0x36>
		//PORTA |= STP_CLK;
		//debug
		PORTA |= 0xff;
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	3b b3       	in	r19, 0x1b	; 27
 148:	2b bb       	out	0x1b, r18	; 27
 14a:	3f ef       	ldi	r19, 0xFF	; 255
 14c:	40 e7       	ldi	r20, 0x70	; 112
 14e:	52 e0       	ldi	r21, 0x02	; 2
 150:	31 50       	subi	r19, 0x01	; 1
 152:	40 40       	sbci	r20, 0x00	; 0
 154:	50 40       	sbci	r21, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <step_single+0x10>
 158:	00 c0       	rjmp	.+0      	; 0x15a <step_single+0x1a>
 15a:	00 00       	nop
		//_delay_ms(duty_ms);
		_delay_ms(100);
		//PORTA &= ~STP_CLK;
		//_delay_ms(duty_ms);
		PORTA &= 0x00;
 15c:	3b b3       	in	r19, 0x1b	; 27
 15e:	1b ba       	out	0x1b, r1	; 27
 160:	3f ef       	ldi	r19, 0xFF	; 255
 162:	40 e7       	ldi	r20, 0x70	; 112
 164:	52 e0       	ldi	r21, 0x02	; 2
 166:	31 50       	subi	r19, 0x01	; 1
 168:	40 40       	sbci	r20, 0x00	; 0
 16a:	50 40       	sbci	r21, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <step_single+0x26>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <step_single+0x30>
 170:	00 00       	nop
		_delay_ms(100);
		--pulses;
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	40 f7       	brcc	.-48     	; 0x146 <step_single+0x6>
 176:	08 95       	ret

00000178 <main>:

int main(void)
{
	//step_init(HALF);
	//step_init(QUARTER);
	step_init(EIGHTH);
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 df       	rcall	.-224    	; 0x9e <step_init>
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	89 e6       	ldi	r24, 0x69	; 105
 182:	98 e1       	ldi	r25, 0x18	; 24
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0xc>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x16>
 18e:	00 00       	nop

    _delay_ms(1000);
	//step_single(1, 100);

	
	step_single(5);
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	d5 df       	rcall	.-86     	; 0x140 <step_single>
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	89 e6       	ldi	r24, 0x69	; 105
 19a:	98 e1       	ldi	r25, 0x18	; 24
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x24>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x2e>
 1a6:	00 00       	nop
	_delay_ms(1000);
    while (1) 
    {
		step_single(5);
 1a8:	85 e0       	ldi	r24, 0x05	; 5
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	c9 df       	rcall	.-110    	; 0x140 <step_single>
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	89 e6       	ldi	r24, 0x69	; 105
 1b2:	98 e1       	ldi	r25, 0x18	; 24
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x3c>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x46>
 1be:	00 00       	nop
 1c0:	f3 cf       	rjmp	.-26     	; 0x1a8 <main+0x30>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>

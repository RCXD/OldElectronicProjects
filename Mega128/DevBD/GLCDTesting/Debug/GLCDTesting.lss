
GLCDTesting.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e6  00800100  00000718  0000078c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000718  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c61  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090f  00000000  00000000  0000168d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d9  00000000  00000000  00001f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  00002478  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048d  00000000  00000000  0000255c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005c4  00000000  00000000  000029e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002fad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	12 e0       	ldi	r17, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e1       	ldi	r30, 0x18	; 24
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 3e       	cpi	r26, 0xE6	; 230
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	05 d2       	rcall	.+1034   	; 0x4be <main>
  b4:	2f c3       	rjmp	.+1630   	; 0x714 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <GLCD_Command>:

#define TotalPage	 8

void GLCD_Command(char Command)		/* GLCD command function */
{
	Data_Port = Command;		/* Copy command on data pin */
  b8:	85 bb       	out	0x15, r24	; 21
	Command_Port &= ~(1 << RS);	/* Make RS LOW for command register*/
  ba:	e2 e6       	ldi	r30, 0x62	; 98
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8f 7e       	andi	r24, 0xEF	; 239
  c2:	80 83       	st	Z, r24
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
  c4:	80 81       	ld	r24, Z
  c6:	87 7f       	andi	r24, 0xF7	; 247
  c8:	80 83       	st	Z, r24
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
  ca:	80 81       	ld	r24, Z
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8d e0       	ldi	r24, 0x0D	; 13
  d2:	8a 95       	dec	r24
  d4:	f1 f7       	brne	.-4      	; 0xd2 <GLCD_Command+0x1a>
  d6:	00 00       	nop
	_delay_us(5);
	Command_Port &= ~(1 << EN);
  d8:	80 81       	ld	r24, Z
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	80 83       	st	Z, r24
  de:	8d e0       	ldi	r24, 0x0D	; 13
  e0:	8a 95       	dec	r24
  e2:	f1 f7       	brne	.-4      	; 0xe0 <GLCD_Command+0x28>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <GLCD_Data>:
	_delay_us(5);
}

void GLCD_Data(char Data)		/* GLCD data function */
{
	Data_Port = Data;		/* Copy data on data pin */
  e8:	85 bb       	out	0x15, r24	; 21
	Command_Port |=  (1 << RS);	/* Make RS HIGH for data register */
  ea:	e2 e6       	ldi	r30, 0x62	; 98
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 61       	ori	r24, 0x10	; 16
  f2:	80 83       	st	Z, r24
	Command_Port &= ~(1 << RW);	/* Make RW LOW for write operation */
  f4:	80 81       	ld	r24, Z
  f6:	87 7f       	andi	r24, 0xF7	; 247
  f8:	80 83       	st	Z, r24
	Command_Port |=  (1 << EN);	/* HIGH-LOW transition on Enable */
  fa:	80 81       	ld	r24, Z
  fc:	80 62       	ori	r24, 0x20	; 32
  fe:	80 83       	st	Z, r24
 100:	8d e0       	ldi	r24, 0x0D	; 13
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <GLCD_Data+0x1a>
 106:	00 00       	nop
	_delay_us(5);
	Command_Port &= ~(1 << EN);
 108:	80 81       	ld	r24, Z
 10a:	8f 7d       	andi	r24, 0xDF	; 223
 10c:	80 83       	st	Z, r24
 10e:	8d e0       	ldi	r24, 0x0D	; 13
 110:	8a 95       	dec	r24
 112:	f1 f7       	brne	.-4      	; 0x110 <GLCD_Data+0x28>
 114:	00 00       	nop
 116:	08 95       	ret

00000118 <GLCD_Init>:
	_delay_us(5);
}

void GLCD_Init()			/* GLCD initialize function */
{
	Data_Port_Dir = 0xFF;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	84 bb       	out	0x14, r24	; 20
	Command_Port_Dir = 0xFF;
 11c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	/* Select both left & right half of display & Keep reset pin high */
	Command_Port |= (1 << CS1) | (1 << CS2) | (1 << RST);
 120:	e2 e6       	ldi	r30, 0x62	; 98
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	87 60       	ori	r24, 0x07	; 7
 128:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	8f e3       	ldi	r24, 0x3F	; 63
 12c:	9c e9       	ldi	r25, 0x9C	; 156
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <GLCD_Init+0x16>
 132:	00 c0       	rjmp	.+0      	; 0x134 <GLCD_Init+0x1c>
 134:	00 00       	nop
	_delay_ms(20);
	GLCD_Command(0x3E);		/* Display OFF */
 136:	8e e3       	ldi	r24, 0x3E	; 62
 138:	bf df       	rcall	.-130    	; 0xb8 <GLCD_Command>
	GLCD_Command(0x40);		/* Set Y address (column=0) */
 13a:	80 e4       	ldi	r24, 0x40	; 64
 13c:	bd df       	rcall	.-134    	; 0xb8 <GLCD_Command>
	GLCD_Command(0xB8);		/* Set x address (page=0) */
 13e:	88 eb       	ldi	r24, 0xB8	; 184
 140:	bb df       	rcall	.-138    	; 0xb8 <GLCD_Command>
	GLCD_Command(0xC0);		/* Set z address (start line=0) */
 142:	80 ec       	ldi	r24, 0xC0	; 192
 144:	b9 df       	rcall	.-142    	; 0xb8 <GLCD_Command>
	GLCD_Command(0x3F);		/* Display ON */
 146:	8f e3       	ldi	r24, 0x3F	; 63
 148:	b7 cf       	rjmp	.-146    	; 0xb8 <GLCD_Command>
 14a:	08 95       	ret

0000014c <GLCD_ClearAll>:
 14c:	1f 93       	push	r17
}

void GLCD_ClearAll()			/* GLCD all display clear function */
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
 152:	e2 e6       	ldi	r30, 0x62	; 98
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	83 60       	ori	r24, 0x03	; 3
 15a:	80 83       	st	Z, r24
 15c:	18 eb       	ldi	r17, 0xB8	; 184
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);/* Increment page */
 15e:	81 2f       	mov	r24, r17
 160:	ab df       	rcall	.-170    	; 0xb8 <GLCD_Command>
 162:	c0 e4       	ldi	r28, 0x40	; 64
 164:	d0 e0       	ldi	r29, 0x00	; 0
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	bf df       	rcall	.-130    	; 0xe8 <GLCD_Data>
 16a:	21 97       	sbiw	r28, 0x01	; 1
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
	{
		GLCD_Command((0xB8) + i);/* Increment page */
		for(j = 0; j < 64; j++)
 16c:	e1 f7       	brne	.-8      	; 0x166 <GLCD_ClearAll+0x1a>
 16e:	1f 5f       	subi	r17, 0xFF	; 255
void GLCD_ClearAll()			/* GLCD all display clear function */
{
	int i,j;
	/* Select both left & right half of display */
	Command_Port |= (1 << CS1) | (1 << CS2);
	for(i = 0; i < TotalPage; i++)
 170:	10 3c       	cpi	r17, 0xC0	; 192
		for(j = 0; j < 64; j++)
		{
			GLCD_Data(0);	/* Write zeros to all 64 column */
		}
	}
	GLCD_Command(0x40);		/* Set Y address (column=0) */
 172:	a9 f7       	brne	.-22     	; 0x15e <GLCD_ClearAll+0x12>
 174:	80 e4       	ldi	r24, 0x40	; 64
	GLCD_Command(0xB8);		/* Set x address (page=0) */
 176:	a0 df       	rcall	.-192    	; 0xb8 <GLCD_Command>
 178:	88 eb       	ldi	r24, 0xB8	; 184
 17a:	9e df       	rcall	.-196    	; 0xb8 <GLCD_Command>
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	08 95       	ret

00000184 <GLCD_String>:

void GLCD_String(char page_no, char *str)/* GLCD string write function */
{
 184:	2f 92       	push	r2
 186:	3f 92       	push	r3
 188:	4f 92       	push	r4
 18a:	5f 92       	push	r5
 18c:	6f 92       	push	r6
 18e:	7f 92       	push	r7
 190:	8f 92       	push	r8
 192:	9f 92       	push	r9
 194:	af 92       	push	r10
 196:	bf 92       	push	r11
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	29 97       	sbiw	r28, 0x09	; 9
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
 1b8:	2b 01       	movw	r4, r22
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
 1ba:	08 2f       	mov	r16, r24
 1bc:	10 e0       	ldi	r17, 0x00	; 0
 1be:	c8 01       	movw	r24, r16
 1c0:	88 54       	subi	r24, 0x48	; 72
 1c2:	9f 4f       	sbci	r25, 0xFF	; 255
 1c4:	9a 83       	std	Y+2, r25	; 0x02
 1c6:	89 83       	std	Y+1, r24	; 0x01
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
	
	Command_Port |= (1 << CS1);	/* Select Left half of display */
 1c8:	e2 e6       	ldi	r30, 0x62	; 98
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	90 81       	ld	r25, Z
 1ce:	91 60       	ori	r25, 0x01	; 1
 1d0:	90 83       	st	Z, r25
	Command_Port &= ~(1 << CS2);
 1d2:	90 81       	ld	r25, Z
 1d4:	9d 7f       	andi	r25, 0xFD	; 253
 1d6:	90 83       	st	Z, r25
	
	GLCD_Command(Page);
 1d8:	6f df       	rcall	.-290    	; 0xb8 <GLCD_Command>
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
 1da:	f2 01       	movw	r30, r4
 1dc:	90 81       	ld	r25, Z
 1de:	99 23       	and	r25, r25
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <GLCD_String+0x60>
 1e2:	52 c1       	rjmp	.+676    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
 1e4:	11 95       	neg	r17
 1e6:	01 95       	neg	r16
 1e8:	11 09       	sbc	r17, r1
 1ea:	16 95       	lsr	r17
 1ec:	10 2f       	mov	r17, r16
 1ee:	00 27       	eor	r16, r16
 1f0:	17 95       	ror	r17
 1f2:	07 95       	ror	r16
 1f4:	98 01       	movw	r18, r16
 1f6:	25 50       	subi	r18, 0x05	; 5
 1f8:	3c 4f       	sbci	r19, 0xFC	; 252
 1fa:	3e 83       	std	Y+6, r19	; 0x06
 1fc:	2d 83       	std	Y+5, r18	; 0x05
void GLCD_String(char page_no, char *str)/* GLCD string write function */
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
	float Page_inc = 0.5;
 1fe:	91 2c       	mov	r9, r1
 200:	31 2c       	mov	r3, r1
 202:	21 2c       	mov	r2, r1
 204:	0f 2e       	mov	r0, r31
 206:	ff e3       	ldi	r31, 0x3F	; 63
 208:	8f 2e       	mov	r8, r31
 20a:	f0 2d       	mov	r31, r0

void GLCD_String(char page_no, char *str)/* GLCD string write function */
{
	unsigned int i, column;
	unsigned int Page = ((0xB8) + page_no);
	unsigned int Y_address = 0;
 20c:	00 e0       	ldi	r16, 0x00	; 0
 20e:	10 e0       	ldi	r17, 0x00	; 0
				{
					if (column == FontWidth)
					break;
					GLCD_Command(0x40);
					Y_address = Y_address + column;
					Command_Port ^= (1 << CS1);
 210:	0f 2e       	mov	r0, r31
 212:	f2 e6       	ldi	r31, 0x62	; 98
 214:	6f 2e       	mov	r6, r31
 216:	71 2c       	mov	r7, r1
 218:	f0 2d       	mov	r31, r0
					Command_Port ^= (1 << CS2);
					GLCD_Command(Page + Page_inc);
 21a:	49 81       	ldd	r20, Y+1	; 0x01
 21c:	5a 81       	ldd	r21, Y+2	; 0x02
 21e:	9a 01       	movw	r18, r20
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	29 83       	std	Y+1, r18	; 0x01
 226:	3a 83       	std	Y+2, r19	; 0x02
 228:	4b 83       	std	Y+3, r20	; 0x03
 22a:	5c 83       	std	Y+4, r21	; 0x04
 22c:	06 c0       	rjmp	.+12     	; 0x23a <GLCD_String+0xb6>
	Command_Port &= ~(1 << CS2);
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
 22e:	ed 81       	ldd	r30, Y+5	; 0x05
 230:	fe 81       	ldd	r31, Y+6	; 0x06
 232:	e0 17       	cp	r30, r16
 234:	f1 07       	cpc	r31, r17
 236:	08 f4       	brcc	.+2      	; 0x23a <GLCD_String+0xb6>
 238:	27 c1       	rjmp	.+590    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
		break;
		if (str[i]!=32)
 23a:	90 32       	cpi	r25, 0x20	; 32
 23c:	09 f4       	brne	.+2      	; 0x240 <GLCD_String+0xbc>
 23e:	47 c0       	rjmp	.+142    	; 0x2ce <GLCD_String+0x14a>
 240:	aa 24       	eor	r10, r10
 242:	a3 94       	inc	r10
 244:	b1 2c       	mov	r11, r1
		{
			for (column=1; column<=FontWidth; column++)
			{
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
 246:	65 01       	movw	r12, r10
 248:	c0 0e       	add	r12, r16
 24a:	d1 1e       	adc	r13, r17
 24c:	20 e0       	ldi	r18, 0x00	; 0
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	40 e0       	ldi	r20, 0x00	; 0
 252:	5f e3       	ldi	r21, 0x3F	; 63
 254:	69 2d       	mov	r22, r9
 256:	73 2d       	mov	r23, r3
 258:	82 2d       	mov	r24, r2
 25a:	98 2d       	mov	r25, r8
 25c:	38 d1       	rcall	.+624    	; 0x4ce <__addsf3>
 25e:	e6 2e       	mov	r14, r22
 260:	f7 2e       	mov	r15, r23
 262:	89 87       	std	Y+9, r24	; 0x09
 264:	9f 83       	std	Y+7, r25	; 0x07
 266:	97 d1       	rcall	.+814    	; 0x596 <__fixsfsi>
 268:	76 95       	lsr	r23
 26a:	76 2f       	mov	r23, r22
 26c:	66 27       	eor	r22, r22
 26e:	77 95       	ror	r23
 270:	67 95       	ror	r22
 272:	c6 16       	cp	r12, r22
 274:	d7 06       	cpc	r13, r23
 276:	19 f5       	brne	.+70     	; 0x2be <GLCD_String+0x13a>
				{
					if (column == FontWidth)
 278:	f5 e0       	ldi	r31, 0x05	; 5
 27a:	af 16       	cp	r10, r31
 27c:	b1 04       	cpc	r11, r1
					break;
					GLCD_Command(0x40);
 27e:	39 f1       	breq	.+78     	; 0x2ce <GLCD_String+0x14a>
 280:	80 e4       	ldi	r24, 0x40	; 64
 282:	1a df       	rcall	.-460    	; 0xb8 <GLCD_Command>
					Y_address = Y_address + column;
					Command_Port ^= (1 << CS1);
 284:	f3 01       	movw	r30, r6
 286:	80 81       	ld	r24, Z
 288:	f1 e0       	ldi	r31, 0x01	; 1
 28a:	8f 27       	eor	r24, r31
 28c:	f3 01       	movw	r30, r6
 28e:	80 83       	st	Z, r24
					Command_Port ^= (1 << CS2);
 290:	80 81       	ld	r24, Z
 292:	f2 e0       	ldi	r31, 0x02	; 2
 294:	8f 27       	eor	r24, r31
 296:	f3 01       	movw	r30, r6
 298:	80 83       	st	Z, r24
					GLCD_Command(Page + Page_inc);
 29a:	69 81       	ldd	r22, Y+1	; 0x01
 29c:	7a 81       	ldd	r23, Y+2	; 0x02
 29e:	8b 81       	ldd	r24, Y+3	; 0x03
 2a0:	9c 81       	ldd	r25, Y+4	; 0x04
 2a2:	aa d1       	rcall	.+852    	; 0x5f8 <__floatunsisf>
 2a4:	29 2d       	mov	r18, r9
 2a6:	33 2d       	mov	r19, r3
 2a8:	42 2d       	mov	r20, r2
 2aa:	58 2d       	mov	r21, r8
 2ac:	10 d1       	rcall	.+544    	; 0x4ce <__addsf3>
 2ae:	78 d1       	rcall	.+752    	; 0x5a0 <__fixunssfsi>
 2b0:	86 2f       	mov	r24, r22
 2b2:	02 df       	rcall	.-508    	; 0xb8 <GLCD_Command>
					Page_inc = Page_inc + 0.5;
 2b4:	9e 2c       	mov	r9, r14
 2b6:	3f 2c       	mov	r3, r15
 2b8:	29 84       	ldd	r2, Y+9	; 0x09
 2ba:	8f 80       	ldd	r8, Y+7	; 0x07
				if ((Y_address+column)==(128*((int)(Page_inc+0.5))))
				{
					if (column == FontWidth)
					break;
					GLCD_Command(0x40);
					Y_address = Y_address + column;
 2bc:	86 01       	movw	r16, r12
	{
		if (Y_address > (1024-(((page_no)*128)+FontWidth)))
		break;
		if (str[i]!=32)
		{
			for (column=1; column<=FontWidth; column++)
 2be:	ff ef       	ldi	r31, 0xFF	; 255
 2c0:	af 1a       	sub	r10, r31
 2c2:	bf 0a       	sbc	r11, r31
 2c4:	26 e0       	ldi	r18, 0x06	; 6
 2c6:	a2 16       	cp	r10, r18
 2c8:	b1 04       	cpc	r11, r1
 2ca:	09 f0       	breq	.+2      	; 0x2ce <GLCD_String+0x14a>
 2cc:	bc cf       	rjmp	.-136    	; 0x246 <GLCD_String+0xc2>
					GLCD_Command(Page + Page_inc);
					Page_inc = Page_inc + 0.5;
				}
			}
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
 2ce:	4d 81       	ldd	r20, Y+5	; 0x05
 2d0:	5e 81       	ldd	r21, Y+6	; 0x06
 2d2:	40 17       	cp	r20, r16
 2d4:	51 07       	cpc	r21, r17
 2d6:	08 f4       	brcc	.+2      	; 0x2da <GLCD_String+0x156>
 2d8:	d7 c0       	rjmp	.+430    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
 2da:	f2 01       	movw	r30, r4
 2dc:	80 81       	ld	r24, Z
 2de:	80 32       	cpi	r24, 0x20	; 32
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <GLCD_String+0x160>
 2e2:	50 c0       	rjmp	.+160    	; 0x384 <GLCD_String+0x200>
 2e4:	78 01       	movw	r14, r16
 2e6:	18 86       	std	Y+8, r1	; 0x08
 2e8:	1f 82       	std	Y+7, r1	; 0x07
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]);
 2ea:	f2 01       	movw	r30, r4
 2ec:	80 81       	ld	r24, Z
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	80 97       	sbiw	r24, 0x20	; 32
 2f2:	fc 01       	movw	r30, r24
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	ee 0f       	add	r30, r30
 2fa:	ff 1f       	adc	r31, r31
 2fc:	e8 0f       	add	r30, r24
 2fe:	f9 1f       	adc	r31, r25
 300:	e0 50       	subi	r30, 0x00	; 0
 302:	ff 4f       	sbci	r31, 0xFF	; 255
 304:	2f 81       	ldd	r18, Y+7	; 0x07
 306:	38 85       	ldd	r19, Y+8	; 0x08
 308:	e2 0f       	add	r30, r18
 30a:	f3 1f       	adc	r31, r19
 30c:	80 81       	ld	r24, Z
 30e:	ec de       	rcall	.-552    	; 0xe8 <GLCD_Data>
				if((Y_address+1)%64==0)
 310:	3f ef       	ldi	r19, 0xFF	; 255
 312:	e3 1a       	sub	r14, r19
 314:	f3 0a       	sbc	r15, r19
 316:	c7 01       	movw	r24, r14
 318:	8f 73       	andi	r24, 0x3F	; 63
 31a:	99 27       	eor	r25, r25
 31c:	89 2b       	or	r24, r25
 31e:	29 f5       	brne	.+74     	; 0x36a <GLCD_String+0x1e6>
				{
					Command_Port ^= (1 << CS1);
 320:	f3 01       	movw	r30, r6
 322:	80 81       	ld	r24, Z
 324:	f1 e0       	ldi	r31, 0x01	; 1
 326:	8f 27       	eor	r24, r31
 328:	f3 01       	movw	r30, r6
 32a:	80 83       	st	Z, r24
					Command_Port ^= (1 << CS2);
 32c:	80 81       	ld	r24, Z
 32e:	f2 e0       	ldi	r31, 0x02	; 2
 330:	8f 27       	eor	r24, r31
 332:	f3 01       	movw	r30, r6
					GLCD_Command((Page+Page_inc));
 334:	80 83       	st	Z, r24
 336:	69 81       	ldd	r22, Y+1	; 0x01
 338:	7a 81       	ldd	r23, Y+2	; 0x02
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
 33c:	9c 81       	ldd	r25, Y+4	; 0x04
 33e:	5c d1       	rcall	.+696    	; 0x5f8 <__floatunsisf>
 340:	29 2d       	mov	r18, r9
 342:	33 2d       	mov	r19, r3
 344:	42 2d       	mov	r20, r2
 346:	58 2d       	mov	r21, r8
 348:	c2 d0       	rcall	.+388    	; 0x4ce <__addsf3>
 34a:	2a d1       	rcall	.+596    	; 0x5a0 <__fixunssfsi>
 34c:	86 2f       	mov	r24, r22
					Page_inc = Page_inc + 0.5;
 34e:	b4 de       	rcall	.-664    	; 0xb8 <GLCD_Command>
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	5f e3       	ldi	r21, 0x3F	; 63
 358:	69 2d       	mov	r22, r9
 35a:	73 2d       	mov	r23, r3
 35c:	82 2d       	mov	r24, r2
 35e:	98 2d       	mov	r25, r8
 360:	b6 d0       	rcall	.+364    	; 0x4ce <__addsf3>
 362:	96 2e       	mov	r9, r22
 364:	37 2e       	mov	r3, r23
 366:	28 2e       	mov	r2, r24
 368:	89 2e       	mov	r8, r25
		}
		if (Y_address>(1024-(((page_no)*128)+FontWidth)))
		break;
		if((font[((str[i]-32)*FontWidth)+4])==0 || str[i]==32)
		{
			for(column=0; column<FontWidth; column++)
 36a:	2f 81       	ldd	r18, Y+7	; 0x07
 36c:	38 85       	ldd	r19, Y+8	; 0x08
 36e:	2f 5f       	subi	r18, 0xFF	; 255
 370:	3f 4f       	sbci	r19, 0xFF	; 255
 372:	38 87       	std	Y+8, r19	; 0x08
 374:	2f 83       	std	Y+7, r18	; 0x07
 376:	25 30       	cpi	r18, 0x05	; 5
 378:	31 05       	cpc	r19, r1
 37a:	09 f0       	breq	.+2      	; 0x37e <GLCD_String+0x1fa>
 37c:	b6 cf       	rjmp	.-148    	; 0x2ea <GLCD_String+0x166>
 37e:	0b 5f       	subi	r16, 0xFB	; 251
 380:	1f 4f       	sbci	r17, 0xFF	; 255
 382:	7b c0       	rjmp	.+246    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 384:	78 01       	movw	r14, r16
 386:	18 86       	std	Y+8, r1	; 0x08
 388:	1f 82       	std	Y+7, r1	; 0x07
		}
		else
		{
			for(column=0; column<FontWidth; column++)
			{
				GLCD_Data(font[str[i]-32][column]);
 38a:	f2 01       	movw	r30, r4
 38c:	80 81       	ld	r24, Z
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	80 97       	sbiw	r24, 0x20	; 32
 392:	fc 01       	movw	r30, r24
 394:	ee 0f       	add	r30, r30
 396:	ff 1f       	adc	r31, r31
 398:	ee 0f       	add	r30, r30
 39a:	ff 1f       	adc	r31, r31
 39c:	e8 0f       	add	r30, r24
 39e:	f9 1f       	adc	r31, r25
 3a0:	e0 50       	subi	r30, 0x00	; 0
 3a2:	ff 4f       	sbci	r31, 0xFF	; 255
 3a4:	2f 81       	ldd	r18, Y+7	; 0x07
 3a6:	38 85       	ldd	r19, Y+8	; 0x08
 3a8:	e2 0f       	add	r30, r18
 3aa:	f3 1f       	adc	r31, r19
 3ac:	80 81       	ld	r24, Z
 3ae:	9c de       	rcall	.-712    	; 0xe8 <GLCD_Data>
				if((Y_address+1)%64==0)
 3b0:	3f ef       	ldi	r19, 0xFF	; 255
 3b2:	e3 1a       	sub	r14, r19
 3b4:	f3 0a       	sbc	r15, r19
 3b6:	c7 01       	movw	r24, r14
 3b8:	8f 73       	andi	r24, 0x3F	; 63
 3ba:	99 27       	eor	r25, r25
 3bc:	89 2b       	or	r24, r25
 3be:	29 f5       	brne	.+74     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
				{
					Command_Port ^= (1 << CS1);
 3c0:	f3 01       	movw	r30, r6
 3c2:	80 81       	ld	r24, Z
 3c4:	f1 e0       	ldi	r31, 0x01	; 1
 3c6:	8f 27       	eor	r24, r31
 3c8:	f3 01       	movw	r30, r6
					Command_Port ^= (1 << CS2);
 3ca:	80 83       	st	Z, r24
 3cc:	80 81       	ld	r24, Z
 3ce:	f2 e0       	ldi	r31, 0x02	; 2
					GLCD_Command((Page+Page_inc));
 3d0:	8f 27       	eor	r24, r31
 3d2:	f3 01       	movw	r30, r6
 3d4:	80 83       	st	Z, r24
 3d6:	69 81       	ldd	r22, Y+1	; 0x01
 3d8:	7a 81       	ldd	r23, Y+2	; 0x02
 3da:	8b 81       	ldd	r24, Y+3	; 0x03
 3dc:	9c 81       	ldd	r25, Y+4	; 0x04
 3de:	0c d1       	rcall	.+536    	; 0x5f8 <__floatunsisf>
 3e0:	29 2d       	mov	r18, r9
 3e2:	33 2d       	mov	r19, r3
 3e4:	42 2d       	mov	r20, r2
 3e6:	58 2d       	mov	r21, r8
 3e8:	72 d0       	rcall	.+228    	; 0x4ce <__addsf3>
 3ea:	da d0       	rcall	.+436    	; 0x5a0 <__fixunssfsi>
 3ec:	86 2f       	mov	r24, r22
 3ee:	64 de       	rcall	.-824    	; 0xb8 <GLCD_Command>
					Page_inc = Page_inc + 0.5;
 3f0:	20 e0       	ldi	r18, 0x00	; 0
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	40 e0       	ldi	r20, 0x00	; 0
 3f6:	5f e3       	ldi	r21, 0x3F	; 63
 3f8:	69 2d       	mov	r22, r9
 3fa:	73 2d       	mov	r23, r3
 3fc:	82 2d       	mov	r24, r2
 3fe:	98 2d       	mov	r25, r8
 400:	66 d0       	rcall	.+204    	; 0x4ce <__addsf3>
 402:	96 2e       	mov	r9, r22
 404:	37 2e       	mov	r3, r23
 406:	28 2e       	mov	r2, r24
 408:	89 2e       	mov	r8, r25
				Y_address++;
			}
		}
		else
		{
			for(column=0; column<FontWidth; column++)
 40a:	2f 81       	ldd	r18, Y+7	; 0x07
 40c:	38 85       	ldd	r19, Y+8	; 0x08
 40e:	2f 5f       	subi	r18, 0xFF	; 255
 410:	3f 4f       	sbci	r19, 0xFF	; 255
 412:	38 87       	std	Y+8, r19	; 0x08
 414:	2f 83       	std	Y+7, r18	; 0x07
 416:	25 30       	cpi	r18, 0x05	; 5
 418:	31 05       	cpc	r19, r1
 41a:	09 f0       	breq	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	b6 cf       	rjmp	.-148    	; 0x38a <GLCD_String+0x206>
					GLCD_Command((Page+Page_inc));
					Page_inc = Page_inc + 0.5;
				}
				Y_address++;
			}
			GLCD_Data(0);
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	63 de       	rcall	.-826    	; 0xe8 <GLCD_Data>
 422:	0a 5f       	subi	r16, 0xFA	; 250
			Y_address++;
 424:	1f 4f       	sbci	r17, 0xFF	; 255
			if((Y_address)%64 == 0)
 426:	c8 01       	movw	r24, r16
 428:	8f 73       	andi	r24, 0x3F	; 63
 42a:	99 27       	eor	r25, r25
 42c:	89 2b       	or	r24, r25
			{
				Command_Port ^= (1 << CS1);
 42e:	29 f5       	brne	.+74     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 430:	f3 01       	movw	r30, r6
 432:	80 81       	ld	r24, Z
 434:	f1 e0       	ldi	r31, 0x01	; 1
				Command_Port ^= (1 << CS2);
 436:	8f 27       	eor	r24, r31
 438:	f3 01       	movw	r30, r6
 43a:	80 83       	st	Z, r24
 43c:	80 81       	ld	r24, Z
 43e:	f2 e0       	ldi	r31, 0x02	; 2
				GLCD_Command((Page+Page_inc));
 440:	8f 27       	eor	r24, r31
 442:	f3 01       	movw	r30, r6
 444:	80 83       	st	Z, r24
 446:	69 81       	ldd	r22, Y+1	; 0x01
 448:	7a 81       	ldd	r23, Y+2	; 0x02
 44a:	8b 81       	ldd	r24, Y+3	; 0x03
 44c:	9c 81       	ldd	r25, Y+4	; 0x04
 44e:	d4 d0       	rcall	.+424    	; 0x5f8 <__floatunsisf>
 450:	29 2d       	mov	r18, r9
 452:	33 2d       	mov	r19, r3
 454:	42 2d       	mov	r20, r2
 456:	58 2d       	mov	r21, r8
 458:	3a d0       	rcall	.+116    	; 0x4ce <__addsf3>
 45a:	a2 d0       	rcall	.+324    	; 0x5a0 <__fixunssfsi>
 45c:	86 2f       	mov	r24, r22
				Page_inc = Page_inc + 0.5;
 45e:	2c de       	rcall	.-936    	; 0xb8 <GLCD_Command>
 460:	20 e0       	ldi	r18, 0x00	; 0
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	5f e3       	ldi	r21, 0x3F	; 63
 468:	69 2d       	mov	r22, r9
 46a:	73 2d       	mov	r23, r3
 46c:	82 2d       	mov	r24, r2
 46e:	98 2d       	mov	r25, r8
 470:	2e d0       	rcall	.+92     	; 0x4ce <__addsf3>
 472:	96 2e       	mov	r9, r22
 474:	37 2e       	mov	r3, r23
 476:	28 2e       	mov	r2, r24
 478:	89 2e       	mov	r8, r25
	
	Command_Port |= (1 << CS1);	/* Select Left half of display */
	Command_Port &= ~(1 << CS2);
	
	GLCD_Command(Page);
	for(i = 0; str[i] != 0; i++)	/* Print char in string till null */
 47a:	ff ef       	ldi	r31, 0xFF	; 255
 47c:	4f 1a       	sub	r4, r31
 47e:	5f 0a       	sbc	r5, r31
 480:	f2 01       	movw	r30, r4
 482:	90 81       	ld	r25, Z
 484:	91 11       	cpse	r25, r1
 486:	d3 ce       	rjmp	.-602    	; 0x22e <GLCD_String+0xaa>
				GLCD_Command((Page+Page_inc));
				Page_inc = Page_inc + 0.5;
			}
		}
	}
	GLCD_Command(0x40);	/* Set Y address (column=0) */
 488:	80 e4       	ldi	r24, 0x40	; 64
 48a:	16 de       	rcall	.-980    	; 0xb8 <GLCD_Command>
 48c:	29 96       	adiw	r28, 0x09	; 9
}
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	f8 94       	cli
 492:	de bf       	out	0x3e, r29	; 62
 494:	0f be       	out	0x3f, r0	; 63
 496:	cd bf       	out	0x3d, r28	; 61
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	ff 90       	pop	r15
 4a2:	ef 90       	pop	r14
 4a4:	df 90       	pop	r13
 4a6:	cf 90       	pop	r12
 4a8:	bf 90       	pop	r11
 4aa:	af 90       	pop	r10
 4ac:	9f 90       	pop	r9
 4ae:	8f 90       	pop	r8
 4b0:	7f 90       	pop	r7
 4b2:	6f 90       	pop	r6
 4b4:	5f 90       	pop	r5
 4b6:	4f 90       	pop	r4
 4b8:	3f 90       	pop	r3
 4ba:	2f 90       	pop	r2
 4bc:	08 95       	ret

000004be <main>:
 4be:	2c de       	rcall	.-936    	; 0x118 <GLCD_Init>

int main(void)
{
	GLCD_Init();		/* Initialize GLCD */
	GLCD_ClearAll();	/* Clear all GLCD display */
 4c0:	45 de       	rcall	.-886    	; 0x14c <GLCD_ClearAll>
 4c2:	60 ee       	ldi	r22, 0xE0	; 224
	GLCD_String(0,"Atmel");	/* Print String on 0th page of display */
 4c4:	72 e0       	ldi	r23, 0x02	; 2
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	5d de       	rcall	.-838    	; 0x184 <GLCD_String>
 4ca:	ff cf       	rjmp	.-2      	; 0x4ca <main+0xc>

000004cc <__subsf3>:
 4cc:	50 58       	subi	r21, 0x80	; 128

000004ce <__addsf3>:
 4ce:	bb 27       	eor	r27, r27
 4d0:	aa 27       	eor	r26, r26
 4d2:	0e d0       	rcall	.+28     	; 0x4f0 <__addsf3x>
 4d4:	e5 c0       	rjmp	.+458    	; 0x6a0 <__fp_round>
 4d6:	d6 d0       	rcall	.+428    	; 0x684 <__fp_pscA>
 4d8:	30 f0       	brcs	.+12     	; 0x4e6 <__addsf3+0x18>
 4da:	db d0       	rcall	.+438    	; 0x692 <__fp_pscB>
 4dc:	20 f0       	brcs	.+8      	; 0x4e6 <__addsf3+0x18>
 4de:	31 f4       	brne	.+12     	; 0x4ec <__addsf3+0x1e>
 4e0:	9f 3f       	cpi	r25, 0xFF	; 255
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <__addsf3+0x1a>
 4e4:	1e f4       	brtc	.+6      	; 0x4ec <__addsf3+0x1e>
 4e6:	cb c0       	rjmp	.+406    	; 0x67e <__fp_nan>
 4e8:	0e f4       	brtc	.+2      	; 0x4ec <__addsf3+0x1e>
 4ea:	e0 95       	com	r30
 4ec:	e7 fb       	bst	r30, 7
 4ee:	c1 c0       	rjmp	.+386    	; 0x672 <__fp_inf>

000004f0 <__addsf3x>:
 4f0:	e9 2f       	mov	r30, r25
 4f2:	e7 d0       	rcall	.+462    	; 0x6c2 <__fp_split3>
 4f4:	80 f3       	brcs	.-32     	; 0x4d6 <__addsf3+0x8>
 4f6:	ba 17       	cp	r27, r26
 4f8:	62 07       	cpc	r22, r18
 4fa:	73 07       	cpc	r23, r19
 4fc:	84 07       	cpc	r24, r20
 4fe:	95 07       	cpc	r25, r21
 500:	18 f0       	brcs	.+6      	; 0x508 <__addsf3x+0x18>
 502:	71 f4       	brne	.+28     	; 0x520 <__addsf3x+0x30>
 504:	9e f5       	brtc	.+102    	; 0x56c <__addsf3x+0x7c>
 506:	ff c0       	rjmp	.+510    	; 0x706 <__fp_zero>
 508:	0e f4       	brtc	.+2      	; 0x50c <__addsf3x+0x1c>
 50a:	e0 95       	com	r30
 50c:	0b 2e       	mov	r0, r27
 50e:	ba 2f       	mov	r27, r26
 510:	a0 2d       	mov	r26, r0
 512:	0b 01       	movw	r0, r22
 514:	b9 01       	movw	r22, r18
 516:	90 01       	movw	r18, r0
 518:	0c 01       	movw	r0, r24
 51a:	ca 01       	movw	r24, r20
 51c:	a0 01       	movw	r20, r0
 51e:	11 24       	eor	r1, r1
 520:	ff 27       	eor	r31, r31
 522:	59 1b       	sub	r21, r25
 524:	99 f0       	breq	.+38     	; 0x54c <__addsf3x+0x5c>
 526:	59 3f       	cpi	r21, 0xF9	; 249
 528:	50 f4       	brcc	.+20     	; 0x53e <__addsf3x+0x4e>
 52a:	50 3e       	cpi	r21, 0xE0	; 224
 52c:	68 f1       	brcs	.+90     	; 0x588 <__addsf3x+0x98>
 52e:	1a 16       	cp	r1, r26
 530:	f0 40       	sbci	r31, 0x00	; 0
 532:	a2 2f       	mov	r26, r18
 534:	23 2f       	mov	r18, r19
 536:	34 2f       	mov	r19, r20
 538:	44 27       	eor	r20, r20
 53a:	58 5f       	subi	r21, 0xF8	; 248
 53c:	f3 cf       	rjmp	.-26     	; 0x524 <__addsf3x+0x34>
 53e:	46 95       	lsr	r20
 540:	37 95       	ror	r19
 542:	27 95       	ror	r18
 544:	a7 95       	ror	r26
 546:	f0 40       	sbci	r31, 0x00	; 0
 548:	53 95       	inc	r21
 54a:	c9 f7       	brne	.-14     	; 0x53e <__addsf3x+0x4e>
 54c:	7e f4       	brtc	.+30     	; 0x56c <__addsf3x+0x7c>
 54e:	1f 16       	cp	r1, r31
 550:	ba 0b       	sbc	r27, r26
 552:	62 0b       	sbc	r22, r18
 554:	73 0b       	sbc	r23, r19
 556:	84 0b       	sbc	r24, r20
 558:	ba f0       	brmi	.+46     	; 0x588 <__addsf3x+0x98>
 55a:	91 50       	subi	r25, 0x01	; 1
 55c:	a1 f0       	breq	.+40     	; 0x586 <__addsf3x+0x96>
 55e:	ff 0f       	add	r31, r31
 560:	bb 1f       	adc	r27, r27
 562:	66 1f       	adc	r22, r22
 564:	77 1f       	adc	r23, r23
 566:	88 1f       	adc	r24, r24
 568:	c2 f7       	brpl	.-16     	; 0x55a <__addsf3x+0x6a>
 56a:	0e c0       	rjmp	.+28     	; 0x588 <__addsf3x+0x98>
 56c:	ba 0f       	add	r27, r26
 56e:	62 1f       	adc	r22, r18
 570:	73 1f       	adc	r23, r19
 572:	84 1f       	adc	r24, r20
 574:	48 f4       	brcc	.+18     	; 0x588 <__addsf3x+0x98>
 576:	87 95       	ror	r24
 578:	77 95       	ror	r23
 57a:	67 95       	ror	r22
 57c:	b7 95       	ror	r27
 57e:	f7 95       	ror	r31
 580:	9e 3f       	cpi	r25, 0xFE	; 254
 582:	08 f0       	brcs	.+2      	; 0x586 <__addsf3x+0x96>
 584:	b3 cf       	rjmp	.-154    	; 0x4ec <__addsf3+0x1e>
 586:	93 95       	inc	r25
 588:	88 0f       	add	r24, r24
 58a:	08 f0       	brcs	.+2      	; 0x58e <__addsf3x+0x9e>
 58c:	99 27       	eor	r25, r25
 58e:	ee 0f       	add	r30, r30
 590:	97 95       	ror	r25
 592:	87 95       	ror	r24
 594:	08 95       	ret

00000596 <__fixsfsi>:
 596:	04 d0       	rcall	.+8      	; 0x5a0 <__fixunssfsi>
 598:	68 94       	set
 59a:	b1 11       	cpse	r27, r1
 59c:	b5 c0       	rjmp	.+362    	; 0x708 <__fp_szero>
 59e:	08 95       	ret

000005a0 <__fixunssfsi>:
 5a0:	98 d0       	rcall	.+304    	; 0x6d2 <__fp_splitA>
 5a2:	88 f0       	brcs	.+34     	; 0x5c6 <__fixunssfsi+0x26>
 5a4:	9f 57       	subi	r25, 0x7F	; 127
 5a6:	90 f0       	brcs	.+36     	; 0x5cc <__fixunssfsi+0x2c>
 5a8:	b9 2f       	mov	r27, r25
 5aa:	99 27       	eor	r25, r25
 5ac:	b7 51       	subi	r27, 0x17	; 23
 5ae:	a0 f0       	brcs	.+40     	; 0x5d8 <__fixunssfsi+0x38>
 5b0:	d1 f0       	breq	.+52     	; 0x5e6 <__fixunssfsi+0x46>
 5b2:	66 0f       	add	r22, r22
 5b4:	77 1f       	adc	r23, r23
 5b6:	88 1f       	adc	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	1a f0       	brmi	.+6      	; 0x5c2 <__fixunssfsi+0x22>
 5bc:	ba 95       	dec	r27
 5be:	c9 f7       	brne	.-14     	; 0x5b2 <__fixunssfsi+0x12>
 5c0:	12 c0       	rjmp	.+36     	; 0x5e6 <__fixunssfsi+0x46>
 5c2:	b1 30       	cpi	r27, 0x01	; 1
 5c4:	81 f0       	breq	.+32     	; 0x5e6 <__fixunssfsi+0x46>
 5c6:	9f d0       	rcall	.+318    	; 0x706 <__fp_zero>
 5c8:	b1 e0       	ldi	r27, 0x01	; 1
 5ca:	08 95       	ret
 5cc:	9c c0       	rjmp	.+312    	; 0x706 <__fp_zero>
 5ce:	67 2f       	mov	r22, r23
 5d0:	78 2f       	mov	r23, r24
 5d2:	88 27       	eor	r24, r24
 5d4:	b8 5f       	subi	r27, 0xF8	; 248
 5d6:	39 f0       	breq	.+14     	; 0x5e6 <__fixunssfsi+0x46>
 5d8:	b9 3f       	cpi	r27, 0xF9	; 249
 5da:	cc f3       	brlt	.-14     	; 0x5ce <__fixunssfsi+0x2e>
 5dc:	86 95       	lsr	r24
 5de:	77 95       	ror	r23
 5e0:	67 95       	ror	r22
 5e2:	b3 95       	inc	r27
 5e4:	d9 f7       	brne	.-10     	; 0x5dc <__fixunssfsi+0x3c>
 5e6:	3e f4       	brtc	.+14     	; 0x5f6 <__fixunssfsi+0x56>
 5e8:	90 95       	com	r25
 5ea:	80 95       	com	r24
 5ec:	70 95       	com	r23
 5ee:	61 95       	neg	r22
 5f0:	7f 4f       	sbci	r23, 0xFF	; 255
 5f2:	8f 4f       	sbci	r24, 0xFF	; 255
 5f4:	9f 4f       	sbci	r25, 0xFF	; 255
 5f6:	08 95       	ret

000005f8 <__floatunsisf>:
 5f8:	e8 94       	clt
 5fa:	09 c0       	rjmp	.+18     	; 0x60e <__floatsisf+0x12>

000005fc <__floatsisf>:
 5fc:	97 fb       	bst	r25, 7
 5fe:	3e f4       	brtc	.+14     	; 0x60e <__floatsisf+0x12>
 600:	90 95       	com	r25
 602:	80 95       	com	r24
 604:	70 95       	com	r23
 606:	61 95       	neg	r22
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	8f 4f       	sbci	r24, 0xFF	; 255
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	99 23       	and	r25, r25
 610:	a9 f0       	breq	.+42     	; 0x63c <__floatsisf+0x40>
 612:	f9 2f       	mov	r31, r25
 614:	96 e9       	ldi	r25, 0x96	; 150
 616:	bb 27       	eor	r27, r27
 618:	93 95       	inc	r25
 61a:	f6 95       	lsr	r31
 61c:	87 95       	ror	r24
 61e:	77 95       	ror	r23
 620:	67 95       	ror	r22
 622:	b7 95       	ror	r27
 624:	f1 11       	cpse	r31, r1
 626:	f8 cf       	rjmp	.-16     	; 0x618 <__floatsisf+0x1c>
 628:	fa f4       	brpl	.+62     	; 0x668 <__floatsisf+0x6c>
 62a:	bb 0f       	add	r27, r27
 62c:	11 f4       	brne	.+4      	; 0x632 <__floatsisf+0x36>
 62e:	60 ff       	sbrs	r22, 0
 630:	1b c0       	rjmp	.+54     	; 0x668 <__floatsisf+0x6c>
 632:	6f 5f       	subi	r22, 0xFF	; 255
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	8f 4f       	sbci	r24, 0xFF	; 255
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	16 c0       	rjmp	.+44     	; 0x668 <__floatsisf+0x6c>
 63c:	88 23       	and	r24, r24
 63e:	11 f0       	breq	.+4      	; 0x644 <__floatsisf+0x48>
 640:	96 e9       	ldi	r25, 0x96	; 150
 642:	11 c0       	rjmp	.+34     	; 0x666 <__floatsisf+0x6a>
 644:	77 23       	and	r23, r23
 646:	21 f0       	breq	.+8      	; 0x650 <__floatsisf+0x54>
 648:	9e e8       	ldi	r25, 0x8E	; 142
 64a:	87 2f       	mov	r24, r23
 64c:	76 2f       	mov	r23, r22
 64e:	05 c0       	rjmp	.+10     	; 0x65a <__floatsisf+0x5e>
 650:	66 23       	and	r22, r22
 652:	71 f0       	breq	.+28     	; 0x670 <__floatsisf+0x74>
 654:	96 e8       	ldi	r25, 0x86	; 134
 656:	86 2f       	mov	r24, r22
 658:	70 e0       	ldi	r23, 0x00	; 0
 65a:	60 e0       	ldi	r22, 0x00	; 0
 65c:	2a f0       	brmi	.+10     	; 0x668 <__floatsisf+0x6c>
 65e:	9a 95       	dec	r25
 660:	66 0f       	add	r22, r22
 662:	77 1f       	adc	r23, r23
 664:	88 1f       	adc	r24, r24
 666:	da f7       	brpl	.-10     	; 0x65e <__floatsisf+0x62>
 668:	88 0f       	add	r24, r24
 66a:	96 95       	lsr	r25
 66c:	87 95       	ror	r24
 66e:	97 f9       	bld	r25, 7
 670:	08 95       	ret

00000672 <__fp_inf>:
 672:	97 f9       	bld	r25, 7
 674:	9f 67       	ori	r25, 0x7F	; 127
 676:	80 e8       	ldi	r24, 0x80	; 128
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	08 95       	ret

0000067e <__fp_nan>:
 67e:	9f ef       	ldi	r25, 0xFF	; 255
 680:	80 ec       	ldi	r24, 0xC0	; 192
 682:	08 95       	ret

00000684 <__fp_pscA>:
 684:	00 24       	eor	r0, r0
 686:	0a 94       	dec	r0
 688:	16 16       	cp	r1, r22
 68a:	17 06       	cpc	r1, r23
 68c:	18 06       	cpc	r1, r24
 68e:	09 06       	cpc	r0, r25
 690:	08 95       	ret

00000692 <__fp_pscB>:
 692:	00 24       	eor	r0, r0
 694:	0a 94       	dec	r0
 696:	12 16       	cp	r1, r18
 698:	13 06       	cpc	r1, r19
 69a:	14 06       	cpc	r1, r20
 69c:	05 06       	cpc	r0, r21
 69e:	08 95       	ret

000006a0 <__fp_round>:
 6a0:	09 2e       	mov	r0, r25
 6a2:	03 94       	inc	r0
 6a4:	00 0c       	add	r0, r0
 6a6:	11 f4       	brne	.+4      	; 0x6ac <__fp_round+0xc>
 6a8:	88 23       	and	r24, r24
 6aa:	52 f0       	brmi	.+20     	; 0x6c0 <__fp_round+0x20>
 6ac:	bb 0f       	add	r27, r27
 6ae:	40 f4       	brcc	.+16     	; 0x6c0 <__fp_round+0x20>
 6b0:	bf 2b       	or	r27, r31
 6b2:	11 f4       	brne	.+4      	; 0x6b8 <__fp_round+0x18>
 6b4:	60 ff       	sbrs	r22, 0
 6b6:	04 c0       	rjmp	.+8      	; 0x6c0 <__fp_round+0x20>
 6b8:	6f 5f       	subi	r22, 0xFF	; 255
 6ba:	7f 4f       	sbci	r23, 0xFF	; 255
 6bc:	8f 4f       	sbci	r24, 0xFF	; 255
 6be:	9f 4f       	sbci	r25, 0xFF	; 255
 6c0:	08 95       	ret

000006c2 <__fp_split3>:
 6c2:	57 fd       	sbrc	r21, 7
 6c4:	90 58       	subi	r25, 0x80	; 128
 6c6:	44 0f       	add	r20, r20
 6c8:	55 1f       	adc	r21, r21
 6ca:	59 f0       	breq	.+22     	; 0x6e2 <__fp_splitA+0x10>
 6cc:	5f 3f       	cpi	r21, 0xFF	; 255
 6ce:	71 f0       	breq	.+28     	; 0x6ec <__fp_splitA+0x1a>
 6d0:	47 95       	ror	r20

000006d2 <__fp_splitA>:
 6d2:	88 0f       	add	r24, r24
 6d4:	97 fb       	bst	r25, 7
 6d6:	99 1f       	adc	r25, r25
 6d8:	61 f0       	breq	.+24     	; 0x6f2 <__fp_splitA+0x20>
 6da:	9f 3f       	cpi	r25, 0xFF	; 255
 6dc:	79 f0       	breq	.+30     	; 0x6fc <__fp_splitA+0x2a>
 6de:	87 95       	ror	r24
 6e0:	08 95       	ret
 6e2:	12 16       	cp	r1, r18
 6e4:	13 06       	cpc	r1, r19
 6e6:	14 06       	cpc	r1, r20
 6e8:	55 1f       	adc	r21, r21
 6ea:	f2 cf       	rjmp	.-28     	; 0x6d0 <__fp_split3+0xe>
 6ec:	46 95       	lsr	r20
 6ee:	f1 df       	rcall	.-30     	; 0x6d2 <__fp_splitA>
 6f0:	08 c0       	rjmp	.+16     	; 0x702 <__fp_splitA+0x30>
 6f2:	16 16       	cp	r1, r22
 6f4:	17 06       	cpc	r1, r23
 6f6:	18 06       	cpc	r1, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	f1 cf       	rjmp	.-30     	; 0x6de <__fp_splitA+0xc>
 6fc:	86 95       	lsr	r24
 6fe:	71 05       	cpc	r23, r1
 700:	61 05       	cpc	r22, r1
 702:	08 94       	sec
 704:	08 95       	ret

00000706 <__fp_zero>:
 706:	e8 94       	clt

00000708 <__fp_szero>:
 708:	bb 27       	eor	r27, r27
 70a:	66 27       	eor	r22, r22
 70c:	77 27       	eor	r23, r23
 70e:	cb 01       	movw	r24, r22
 710:	97 f9       	bld	r25, 7
 712:	08 95       	ret

00000714 <_exit>:
 714:	f8 94       	cli

00000716 <__stop_program>:
 716:	ff cf       	rjmp	.-2      	; 0x716 <__stop_program>
